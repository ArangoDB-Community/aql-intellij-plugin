plugins {
  id 'java'
  id "org.jetbrains.intellij" version "0.7.3"
  id "org.jetbrains.grammarkit" version "2021.1.3"
  id 'net.researchgate.release' version '2.8.1'
}

repositories {
  jcenter()
  mavenCentral()
  maven { url "https://www.jitpack.io" }
}


apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.jetbrains.intellij'
apply plugin: 'net.researchgate.release'

def ideaVersionExternDefinition = System.getenv("IDEA_VERSION")
ideaVersion = ideaVersionExternDefinition ? ideaVersionExternDefinition : ideaVersion
def isEAP = ideaVersion.contains("LATEST-EAP-SNAPSHOT") || ideaVersion.take(4).contains(".")
def artifactVersion = version + "-" + (isEAP ? "EAP" : ideaVersion)
println "ideaVersion: ${ideaVersion}"
println "artifactVersion: ${artifactVersion}"


group 'com.arangodb'

sourceCompatibility = 11


dependencies {

  testRuntimeOnly group: 'junit', name: 'junit', version: '4.13.2'
  implementation('com.arangodb:arangodb-java-driver:6.14.0') {
    exclude group: 'org.slf4j', module: 'slf4j-api'
  }


  implementation "com.fasterxml.jackson.core:jackson-core:2.13.0"
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.0'
}
patchPluginXml {
  version artifactVersion
  if (isEAP || (ideaVersion == lastReleaseVersion)) {
    untilBuild ""
  }
}
intellij {
  version ideaVersion
  println "Intellij version: ${version}"
  pluginName pluginName
  updateSinceUntilBuild true
  sameSinceUntilBuild false
  sandboxDirectory = "${rootProject.projectDir}/idea-sandbox/idea-${ideaVersion}"

  plugins 'java'
  intellij.plugins 'java'
}
/*
* Works like maven release plugin, see:
* https://github.com/researchgate/gradle-release
*
* */

release {
  revertOnFail = true
  failOnCommitNeeded = true
  failOnPublishNeeded = true
  failOnUpdateNeeded = true
  failOnSnapshotDependencies = true
  failOnUnversionedFiles = true
  /* pushReleaseVersionBranch = false*/
  failOnUnversionedFiles = true

  buildTasks = ['build']

  tagTemplate = '$name-$version'
  preCommitText = '[Gradle release]'
  preTagCommitMessage = 'Gradle Pre tag commit: '
  tagCommitMessage = 'Gradle Creating tag: '
  newVersionCommitMessage = ' New version commit: '

  git {
    requireBranch = 'master'
    pushToRemote = 'origin'
  }
}
