{
// https://github.com/arangodb/arangodb/blob/devel/arangod/Aql/grammar.y
    psiClassPrefix="Aql"
    psiImplClassSuffix="Impl"
    parserUtilClass="com.machak.aql.grammar.generated.AqlParserUtil"
    parserClass="com.machak.aql.grammar.generated.AqlParser"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
    elementTypeHolderClass="com.machak.aql.grammar.generated.psi.AqlTypes"
    elementTypeClass="com.machak.aql.grammar.AqlElementType"
    tokenTypeClass="com.machak.aql.grammar.AqlTokenType"
    psiImplUtilClass="com.machak.aql.grammar.generated.psi.AqlPsiUtil"
    psiPackage="com.machak.aql.grammar.generated.psi"
    psiImplPackage="com.machak.aql.grammar.generated.psi.impl"
    
tokens = [
    // system:
T_SEARCH = "regexp:([Ss])([Ee])([Aa])([Rr])([Cc])([Hh])"
T_PHRASE = "regexp:([Pp])([Hh])([Rr])([Aa])([Ss])([Ee])"
T_SHORTEST_PATH = "regexp:([Ss])([Hh])([Oo])([Rr])([Tt])([Ee])([Ss])([Pp])([Aa])([Tt])([Hh])"
T_REPLACE = "regexp:([Rr])([Ee])([Pp])([Ll])([Aa])([Cc])([Ee])"
T_ASC = "regexp:([Aa])([Ss])([Cc])"
T_AGGREGATE = "regexp:([Aa])([Gg])([Gg])([Rr])([Ee])([Gg])([Aa])([Tt])([Ee])"
T_FILTER = "regexp:([Ff])([Ii])([Ll])([Tt])([Ee])([Rr])"
T_DESC = "regexp:([Dd])([Ee])([Ss])([Cc])"
T_IN = "regexp:([Ii])([Nn])"
T_INTO = "regexp:([Ii])([Nn])([Tt])([Oo])"
T_LIMIT = "regexp:([Ll])([Ii])([Mm])([Ii])([Tt])"
T_UPDATE = "regexp:([Uu])([Pp])([Dd])([Aa])([Tt])([Ee])"
T_SORT = "regexp:([Ss])([Oo])([Rr])([Tt])"
T_GRAPH = "regexp:([Gg])([Rr])([Aa])([Pp])([Hh])"
T_FOR = "regexp:([Ff])([Oo])([Rr])"
T_LET = "regexp:([Ll])([Ee])([Tt])"
T_COLLECT = "regexp:([Cc])([Oo])([Ll])([Ll])([Ee])([Cc])([Tt])"
T_WITH = "regexp:([Ww])([Ii])([Tt])([Hh])"
T_DISTINCT = "regexp:([Dd])([Ii])([Ss])([Tt])([Ii])([Nn])([Cc])([Tt])"
T_RETURN = "regexp:([Rr])([Ee])([Tt])([Uu])([Rr])([Nn])"
T_UPSERT = "regexp:([Uu])([Pp])([Ss])([Ee])([Rr])([Tt])"
T_REMOVE = "regexp:([Rr])([Ee])([Mm])([Oo])([Vv])([Ee])"
T_INSERT = "regexp:([Ii])([Nn])([Ss])([Ee])([Rr])([Tt])"
T_INTERSECTION = "regexp:([Ii])([Nn])([Tt])([Ee])([Rr])([Ss])([Ee])([Cc])([Tt])([Ii])([Oo])([Nn])"
F_INTERSECTION = "regexp:([Oo])([Uu])([Tt])([Ee])([Rr])([Ss])([Ee])([Cc])([Tt])([Ii])([Oo])([Nn])"
T_OUTBOUND = "regexp:([Oo])([Uu])([Tt])([Bb])([Aa])([Nn])([Dd])"
T_INBOUND = "regexp:([Ii])([Nn])([Bb])([Aa])([Nn])([Dd])"
T_ANY = "regexp:([Aa])([Nn])([Yy])"
T_ALL = "regexp:([Aa])([Ll])([Ll])"
T_NULL = "regexp:([Nn])([Uu])([Ll])([Ll])"
T_AND = "regexp:([Aa])([Nn])([Dd])"
// functions
F_HAS = "regexp:([Hh])([Aa])([Ss])"
F_LENGTH = "regexp:([Ll])([Ee])([Nn])([Nn])([Gg])([Tt])([Hh])"
F_COLLECTIONS = "regexp:([Cc])([Oo])([Ll])([Ll])([Ee])([Cc])([Tt])([Ii])([Oo])([Nn])([Ss])"
F_COUNT = "regexp:([Cc])([Oo])([Uu])([Nn])([Tt])"
F_UNION = "regexp:([Uu])([Nn])([Ii])([Oo])([Nn])"
F_UNION_DISTINCT = "regexp:([Uu])([Nn])([Ii])([Oo])([Nn])([_])([Dd])([Ii])([Ss])([Tt])([Ii])([Nn])([Cc])([Tt])"
F_FIRST = "regexp:([Ff])([Ii])([Rr])([Ss])([Tt])"
F_LAST = "regexp:([Ll])([Aa])([Ss])([Tt])"
F_NTH = "regexp:([Nn])([Tt])([Hh])"
F_REMOVE_NTH = "regexp:([Rr])([Ee])([Mm])([Oo])([Vv])([Ee])([_])([Nn])([Tt])([Hh])"
F_REMOVE_VALUE = "regexp:([Rr])([Ee])([Mm])([Oo])([Vv])([Ee])([_])([Vv])([Aa])([Ll])([Uu])([Ee])"
F_REMOVE_VALUES = "regexp:([Rr])([Ee])([Mm])([Oo])([Vv])([Ee])([_])([Vv])([Aa])([Ll])([Uu])([Ee])([Ss])"
F_POP = "regexp:([Pp])([Oo])([Pp])"
F_PUSH = "regexp:([Pp])([Uu])([Ss])([Hh])"
F_SHIFT = "regexp:([Ss])([Hh])([Ii])([Ff])([Tt])"
F_UNSHIFT = "regexp:([Uu])([Nn])([Ss])([Hh])([Ii])([Ff])([Tt])"
F_SLICE = "regexp:([Ss])([Ll])([Ii])([Cc])([Ee])"
F_SORTED = "regexp:([Ss])([Oo])([Rr])([Tt])([Ee])([Dd])"
F_SORTED_UNIQUE = "regexp:([Ss])([Oo])([Rr])([Tt])([Ee])([Dd])([_])([Uu])([Nn])([Ii])([Qq])([Uu])([Ee])"
F_POSITION = "regexp:([Pp])([Oo])([Ss])([Ii])([Tt])([Ii])([Oo])([Nn])"
F_REVERSE = "regexp:([Rr])([Ee])([Vv])([Ee])([Rr])([Ss])([Ee])"
F_MINUS = "regexp:([Mm])([Ii])([Nn])([Uu])([Ss])"
F_COUNT_DISTINCT = "regexp:([Cc])([Oo])([Uu])([Nn])([Tt])([_])([Dd])([Ii])([Ss])([Tt])([Ii])([Nn])([Cc])([Tt])"
F_COUNT_UNIQUE = "regexp:([Cc])([Oo])([Uu])([Nn])([Tt])([_])([Uu])([Nn])([Ii])([Qq])([Uu])([Ee])"
F_UNIQUE = "regexp:([Uu])([Nn])([Ii])([Qq])([Uu])([Ee])"
F_INTERSECTION = "regexp:([Oo])([Uu])([Tt])([Ee])([Rr])([Ss])([Ee])([Cc])([Tt])([Ii])([Oo])([Nn])"

T_KEY = "_key"
T_ID = "_id"
T_SYS_FROM = "_from"
T_SYS_TO = "_to"
    // operators
T_AT = "@"
T_TRUE = "true"
T_FALSE = "false"
T_NOT = "not"

T_LOGICAL_AND = "&&"
T_OR = "||"
T_REGEX_MATCH = "~="
T_REGEX_NON_MATCH = "~!"
T_EQ = "=="
T_IS = "="
T_NE = "!="
T_LT = "<"
T_GT = ">"
T_LE = "<="
T_GE = ">="
T_LIKE = "like"
T_PLUS = "+"
T_MINUS = "-"
T_TIMES = "*"
T_DIV = "/"
T_MOD = "%"
T_QUESTION = "?"
T_COLON = ":"
T_SCOPE = "::"
T_RANGE = ".."
T_COMMA = ","
T_OPEN = "("
T_CLOSE = ")"
T_OBJECT_OPEN = "{"
T_OBJECT_CLOSE = "}"
T_ARRAY_OPEN = "["
T_ARRAY_CLOSE = "]"

T_NONE = "none"
    // my
    SINGLE_QUOTE="'"
    DOUBLE_QUOTE="\""
    DOLLAR="$"
    OBJECT_START="${"
    NUMBER_INTEGER="regexp:\d+"
    SPACE='regexp:\s+'
    B_COMMENT="regexp:/\*(.|\n)*\*/"
    L_COMMENT='regexp://.*'
    TEXT_SINGLE ="regexp:'(''|[^']*)'"
    TEXT_DOUBLE ="regexp:\".*\""
    ID='regexp:\p{Alpha}\w*'
    ID='regexp:\p{Alpha}\w*'

]
    
}
aql ::= QueryItem *
LineComment ::= L_COMMENT
BlockComment ::=  B_COMMENT
Comment ::= LineComment | BlockComment
QueryItem ::= !<<eof>> Statement {pin=1 recoverWhile=statement_recover}
private statement_recover::= !(
                        Statement
                    )


KeywordFunctions ::=    F_HAS
                        | F_LENGTH
                        | F_COUNT
                        | F_COLLECTIONS
                        | F_COUNT_DISTINCT
                        | F_COUNT_UNIQUE
                        | F_UNIQUE
                        | F_FIRST
                        | F_LAST
                        | F_MINUS
                        | F_NTH
                        | F_REMOVE_NTH
                        | F_REMOVE_VALUE
                        | F_REMOVE_VALUES
                        | F_REVERSE
                        | F_SLICE
                        | F_POP
                        | F_PUSH
                        | F_SHIFT
                        | F_UNSHIFT
                        | F_SORTED
                        | F_SORTED_UNIQUE
                        | F_POSITION
                        | F_UNION
                        | F_UNION_DISTINCT
                        | F_OUTERSECTION



KeywordStatements ::=    T_SHORTEST_PATH
                        | T_PHRASE
                        | T_SEARCH
                        | T_REPLACE
                        | T_ASC
                        | T_AGGREGATE
                        | T_FILTER
                        | T_DESC
                        | T_IN
                        | T_INTO
                        | T_LIMIT
                        | T_UPDATE
                        | T_SORT
                        | T_GRAPH
                        | T_FOR
                        | T_LET
                        | T_COLLECT
                        | T_WITH
                        | T_DISTINCT
                        | T_RETURN
                        | T_UPSERT
                        | T_REMOVE
                        | T_INSERT
                        | T_INTERSECTION

OperatorStatements ::= T_NULL
                       | T_TRUE
                       | T_AT
                       | T_IS
                       | T_FALSE
                       | T_NOT
                       | T_AND
                       | T_LOGICAL_AND
                       | T_OR
                       | T_NIN
                       | T_REGEX_MATCH
                       | T_REGEX_NON_MATCH
                       | T_EQ
                       | T_NE
                       | T_LT
                       | T_GT
                       | T_LE
                       | T_GE
                       | T_LIKE
                       | T_PLUS
                       | T_MINUS
                       | T_TIMES
                       | T_DIV
                       | T_MOD
                       | T_QUESTION
                       | T_COLON
                       | T_SCOPE
                       | T_RANGE
                       | T_COMMA
                       | T_OPEN
                       | T_CLOSE
                       | T_OBJECT_OPEN
                       | T_OBJECT_CLOSE
                       | T_ARRAY_OPEN
                       | T_ARRAY_CLOSE
                       | T_OUTBOUND
                       | T_INBOUND
                       | T_ANY
                       | T_ALL
                       | T_NONE
Statement ::= (KeywordStatements)
              | (KeywordFunctions)
              | (OperatorStatements)
              | (PropertyName)
              | (ObjectVariable)
              | (Sequence)
              | (StringType)
              | (IntegerType)
              | (LimitOffset)
              | (ObjectExpression)
              | (Comment)

ObjectExpression ::=  (PropertyLookup)+
ObjectVariable ::=  OBJECT_START PropertyName | ObjectExpression T_OBJECT_CLOSE
StringType ::=  (TEXT_SINGLE) | (TEXT_DOUBLE)
IntegerType ::= NUMBER_INTEGER
Sequence ::= IntegerType ".." IntegerType
LimitOffset ::= IntegerType "," IntegerType
PropertyLookup ::= ("." PropertyName) | ("." SystemProperty)
SystemProperty ::=  T_KEY | T_ID  | T_SYS_FROM  | T_SYS_TO
PropertyName ::= ID


