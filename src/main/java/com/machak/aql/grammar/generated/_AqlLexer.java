/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.machak.aql.grammar.generated;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.*;
import static com.machak.aql.grammar.generated.psi.AqlTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_AqlLexer.flex</tt>
 */
public class _AqlLexer implements FlexLexer {

    /**
     * This character denotes the end of file
     */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14208 bytes
   */
  public static int ZZ_CMAP(int ch) {
      return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 10] << 6) | ((ch >> 4) & 0x3f)] << 4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
          "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16" +
                  "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1" +
                  "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43" +
                  "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1" +
                  "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
          "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34" +
                  "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25" +
                  "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5" +
                  "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1" +
                  "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52" +
                  "\1\16\1\25\1\53\1\54\1\55\1\56\1\57\1\60\2\16\1\61\1\54\1\55\1\62\1\1\1\63" +
                  "\1\1\1\64\1\65\1\22\1\55\1\66\1\1\1\67\1\16\1\70\1\71\1\54\1\55\1\66\1\1\1" +
                  "\60\1\16\1\41\1\72\1\73\1\74\1\75\1\1\1\67\2\1\1\76\1\36\1\55\1\51\1\1\1\77" +
                  "\1\16\1\1\1\100\1\36\1\55\1\101\1\1\1\57\1\16\1\102\1\76\1\36\1\13\1\103\1" +
                  "\57\1\104\1\16\1\42\1\105\1\106\1\13\1\107\1\110\3\1\1\25\2\13\1\111\1\110" +
                  "\3\1\1\112\1\113\1\114\1\115\1\116\1\117\2\1\1\67\3\1\1\120\1\13\1\121\1\1" +
                  "\1\122\7\1\2\13\1\30\1\123\1\1\1\124\1\125\1\126\1\127\1\1\2\13\1\130\2\13" +
                  "\1\131\24\13\1\132\1\133\2\13\1\132\2\13\1\134\1\135\1\14\3\13\1\135\3\13" +
                  "\1\30\2\1\1\13\1\1\5\13\1\136\1\25\45\13\1\137\1\13\1\140\1\30\4\13\1\30\1" +
                  "\141\1\142\1\16\1\13\1\16\1\13\1\16\1\142\1\67\3\13\1\143\1\1\1\144\4\1\5" +
                  "\13\1\27\1\145\1\13\1\146\4\13\1\40\1\13\1\147\3\1\1\13\1\150\1\151\2\13\1" +
                  "\152\1\13\1\75\3\1\1\13\1\110\3\13\1\151\4\1\1\153\5\1\1\105\2\13\1\143\1" +
                  "\154\3\1\1\155\1\13\1\156\1\42\2\13\1\40\1\1\2\13\1\143\1\1\1\37\1\42\1\13" +
                  "\1\150\1\46\5\1\1\157\1\160\14\13\4\1\21\13\1\136\2\13\1\136\1\161\1\13\1" +
                  "\150\3\13\1\162\1\163\1\164\1\121\1\163\1\165\1\1\1\166\2\1\1\167\1\1\1\170" +
                  "\1\1\1\121\6\1\1\171\1\172\1\173\1\174\1\175\3\1\1\176\147\1\2\13\1\147\2" +
                  "\13\1\147\10\13\1\177\1\200\2\13\1\130\3\13\1\201\1\1\1\13\1\110\4\202\4\1" +
                  "\1\123\35\1\1\203\2\1\1\204\1\25\4\13\1\205\1\25\4\13\1\131\1\105\1\13\1\150" +
                  "\1\25\4\13\1\147\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2" +
                  "\1\10\13\1\121\4\1\2\13\1\150\20\13\1\121\1\13\1\206\1\1\2\13\1\147\1\123" +
                  "\1\13\1\150\4\13\1\40\2\1\1\207\1\210\5\13\1\211\1\13\1\147\1\27\3\1\1\207" +
                  "\1\212\1\13\1\31\1\1\3\13\1\143\1\210\2\13\1\143\3\1\1\213\1\42\1\13\1\40" +
                  "\1\13\1\110\1\1\1\13\1\121\1\50\2\13\1\31\1\123\1\1\1\214\1\215\2\13\1\46" +
                  "\1\1\1\216\1\1\1\13\1\217\3\13\1\220\1\221\1\222\1\30\1\64\1\223\1\224\1\202" +
                  "\2\13\1\131\1\40\7\13\1\31\1\1\72\13\1\143\1\13\1\225\2\13\1\152\20\1\26\13" +
                  "\1\150\6\13\1\75\2\1\1\110\1\226\1\55\1\227\1\230\6\13\1\16\1\1\1\155\25\13" +
                  "\1\150\1\1\4\13\1\210\2\13\1\27\2\1\1\152\7\1\1\214\7\13\1\121\2\1\1\25\1" +
                  "\30\1\25\1\30\1\231\4\13\1\147\1\232\1\233\2\1\1\234\1\13\1\14\1\235\2\150" +
                  "\2\1\7\13\1\30\30\1\1\13\1\121\3\13\1\67\2\1\2\13\1\1\1\13\1\236\2\13\1\40" +
                  "\1\13\1\150\2\13\1\237\3\1\11\13\1\150\1\1\2\13\1\237\1\13\1\152\2\13\1\27" +
                  "\3\13\1\143\11\1\23\13\1\110\1\13\1\40\1\27\11\1\1\240\2\13\1\241\1\13\1\40" +
                  "\1\13\1\110\1\13\1\147\4\1\1\13\1\242\1\13\1\40\1\13\1\75\4\1\3\13\1\243\4" +
                  "\1\1\67\1\244\1\13\1\143\2\1\1\13\1\121\1\13\1\121\2\1\1\120\1\13\1\151\1" +
                  "\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1\46\3\1\3\13\1\31\3\13" +
                  "\1\31\60\1\1\155\2\13\1\27\4\1\1\155\2\13\2\1\1\13\1\46\1\1\1\155\1\13\1\110" +
                  "\2\1\2\13\1\245\1\155\2\13\1\31\1\246\1\247\2\1\1\13\1\22\1\152\5\1\1\250" +
                  "\1\251\1\46\2\13\1\147\2\1\1\71\1\54\1\55\1\66\1\1\1\252\1\16\11\1\3\13\1" +
                  "\151\1\253\3\1\3\13\1\1\1\254\13\1\2\13\1\147\2\1\1\255\2\1\3\13\1\1\1\256" +
                  "\3\1\2\13\1\30\5\1\1\13\1\75\30\1\4\13\1\1\1\123\34\1\3\13\1\46\20\1\1\55" +
                  "\1\13\1\147\1\1\1\67\2\1\1\210\1\13\67\1\71\13\1\75\16\1\14\13\1\143\53\1" +
                  "\2\13\1\147\75\1\44\13\1\110\33\1\43\13\1\46\1\13\1\147\7\1\1\13\1\150\1\1" +
                  "\3\13\1\1\1\143\1\1\1\155\1\257\1\13\67\1\4\13\1\151\1\67\3\1\1\155\4\1\1" +
                  "\67\1\1\76\13\1\121\1\1\57\13\1\31\20\1\1\16\77\1\6\13\1\30\1\121\1\46\1\75" +
                  "\66\1\5\13\1\214\3\13\1\142\1\260\1\261\1\262\3\13\1\263\1\264\1\13\1\265" +
                  "\1\266\1\36\24\13\1\267\1\13\1\36\1\131\1\13\1\131\1\13\1\214\1\13\1\214\1" +
                  "\147\1\13\1\147\1\13\1\55\1\13\1\55\1\13\1\216\3\1\14\13\1\151\3\1\4\13\1" +
                  "\143\113\1\1\262\1\13\1\270\1\271\1\272\1\273\1\274\1\275\1\276\1\152\1\277" +
                  "\1\152\24\1\55\13\1\110\2\1\103\13\1\151\15\13\1\150\150\13\1\16\25\1\41\13" +
                  "\1\150\36\1");

  /* The ZZ_CMAP_A table has 3072 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
          "\11\0\1\3\1\2\3\1\22\0\1\3\1\66\1\37\1\0\1\106\1\73\1\62\1\36\1\100\1\101" +
                  "\1\35\1\71\1\77\1\72\1\76\1\34\12\33\1\75\1\0\1\67\1\65\1\70\1\74\1\54\1\6" +
                  "\1\27\1\107\1\21\1\5\1\17\1\16\1\11\1\20\2\41\1\15\1\23\1\22\1\13\1\12\1\32" +
                  "\1\7\1\4\1\14\1\24\1\26\1\25\1\41\1\30\1\41\1\104\1\0\1\105\1\0\1\31\1\0\1" +
                  "\56\1\27\1\10\1\46\1\43\1\47\1\16\1\11\1\45\1\41\1\42\1\57\1\52\1\61\1\51" +
                  "\1\12\1\32\1\50\1\60\1\53\1\55\1\26\1\25\1\41\1\44\1\41\1\102\1\63\1\103\1" +
                  "\64\6\0\1\1\12\0\1\3\11\0\1\40\12\0\1\40\4\0\1\40\5\0\27\40\1\0\12\40\4\0" +
                  "\14\40\16\0\5\40\7\0\1\40\1\0\1\40\1\0\5\40\1\0\2\40\2\0\4\40\1\0\1\40\6\0" +
                  "\1\40\1\0\3\40\1\0\1\40\1\0\4\40\1\0\23\40\1\0\13\40\10\0\6\40\1\0\26\40\2" +
                  "\0\1\40\6\0\10\40\10\0\13\40\5\0\3\40\33\0\6\40\1\0\1\40\17\0\2\40\7\0\2\40" +
                  "\12\0\3\40\2\0\2\40\1\0\16\40\15\0\11\40\13\0\1\40\30\0\6\40\4\0\2\40\4\0" +
                  "\1\40\5\0\6\40\4\0\1\40\11\0\1\40\3\0\1\40\7\0\11\40\7\0\5\40\1\0\10\40\6" +
                  "\0\26\40\3\0\1\40\2\0\1\40\7\0\11\40\4\0\10\40\2\0\2\40\2\0\26\40\1\0\7\40" +
                  "\1\0\1\40\3\0\4\40\3\0\1\40\20\0\1\40\15\0\2\40\1\0\1\40\5\0\6\40\4\0\2\40" +
                  "\1\0\2\40\1\0\2\40\1\0\2\40\17\0\4\40\1\0\1\40\3\0\3\40\20\0\11\40\1\0\2\40" +
                  "\1\0\2\40\1\0\5\40\3\0\1\40\2\0\1\40\30\0\1\40\13\0\10\40\2\0\1\40\3\0\1\40" +
                  "\1\0\6\40\3\0\3\40\1\0\4\40\3\0\2\40\1\0\1\40\1\0\2\40\3\0\2\40\3\0\3\40\3" +
                  "\0\14\40\13\0\10\40\1\0\2\40\10\0\3\40\5\0\1\40\4\0\10\40\1\0\6\40\1\0\5\40" +
                  "\3\0\1\40\3\0\2\40\15\0\13\40\2\0\1\40\6\0\3\40\10\0\1\40\5\0\22\40\3\0\10" +
                  "\40\1\0\11\40\1\0\1\40\2\0\7\40\11\0\1\40\1\0\2\40\15\0\2\40\1\0\1\40\2\0" +
                  "\2\40\1\0\1\40\2\0\1\40\6\0\4\40\1\0\7\40\1\0\3\40\1\0\1\40\1\0\1\40\2\0\2" +
                  "\40\1\0\4\40\1\0\2\40\11\0\1\40\2\0\5\40\1\0\1\40\25\0\14\40\1\0\24\40\13" +
                  "\0\5\40\22\0\7\40\4\0\4\40\3\0\1\40\3\0\2\40\7\0\3\40\4\0\15\40\14\0\1\40" +
                  "\1\0\6\40\1\0\1\40\5\0\1\40\2\0\13\40\1\0\15\40\1\0\4\40\2\0\7\40\1\0\1\40" +
                  "\1\0\4\40\2\0\1\40\1\0\4\40\2\0\7\40\1\0\1\40\1\0\4\40\2\0\16\40\2\0\6\40" +
                  "\2\0\15\40\2\0\1\40\1\3\17\40\1\0\10\40\7\0\15\40\1\0\6\40\23\0\1\40\4\0\1" +
                  "\40\3\0\5\40\2\0\22\40\1\0\1\40\5\0\17\40\1\0\16\40\2\0\5\40\13\0\14\40\13" +
                  "\0\1\40\15\0\7\40\7\0\16\40\15\0\2\40\11\0\4\40\1\0\4\40\3\0\2\40\11\0\10" +
                  "\40\1\0\1\40\1\0\1\40\1\0\1\40\1\0\6\40\1\0\7\40\1\0\1\40\3\0\3\40\1\0\7\40" +
                  "\3\0\4\40\2\0\6\40\4\0\13\3\15\0\2\1\5\0\1\3\17\0\1\3\1\0\1\40\15\0\1\40\2" +
                  "\0\1\40\4\0\1\40\2\0\12\40\1\0\1\40\3\0\5\40\6\0\1\40\1\0\1\40\1\0\1\40\1" +
                  "\0\4\40\1\0\13\40\2\0\4\40\5\0\5\40\4\0\1\40\4\0\2\40\13\0\5\40\6\0\4\40\3" +
                  "\0\2\40\14\0\10\40\7\0\10\40\1\0\7\40\1\0\1\3\4\0\2\40\12\0\5\40\5\0\2\40" +
                  "\3\0\7\40\6\0\3\40\12\0\2\40\13\0\11\40\2\0\27\40\2\0\7\40\1\0\3\40\1\0\4" +
                  "\40\1\0\4\40\2\0\6\40\3\0\1\40\1\0\1\40\2\0\5\40\1\0\12\40\12\0\5\40\1\0\3" +
                  "\40\1\0\10\40\4\0\7\40\3\0\1\40\3\0\2\40\1\0\1\40\3\0\2\40\2\0\5\40\2\0\1" +
                  "\40\1\0\1\40\30\0\3\40\3\0\6\40\2\0\6\40\2\0\6\40\11\0\7\40\4\0\5\40\3\0\5" +
                  "\40\5\0\1\40\1\0\10\40\1\0\5\40\1\0\1\40\1\0\2\40\1\0\2\40\1\0\12\40\6\0\12" +
                  "\40\2\0\6\40\2\0\6\40\2\0\6\40\2\0\3\40\3\0\14\40\1\0\16\40\1\0\2\40\1\0\2" +
                  "\40\1\0\10\40\6\0\4\40\4\0\16\40\2\0\1\40\1\0\14\40\1\0\2\40\3\0\1\40\2\0" +
                  "\4\40\1\0\2\40\12\0\10\40\6\0\6\40\1\0\3\40\1\0\12\40\3\0\1\40\12\0\4\40\25" +
                  "\0\1\40\1\0\1\40\3\0\7\40\1\0\1\40\1\0\4\40\1\0\17\40\1\0\2\40\14\0\3\40\7" +
                  "\0\4\40\11\0\2\40\1\0\1\40\20\0\4\40\10\0\1\40\13\0\10\40\5\0\3\40\2\0\1\40" +
                  "\2\0\2\40\2\0\4\40\1\0\14\40\1\0\1\40\1\0\7\40\1\0\21\40\1\0\4\40\2\0\10\40" +
                  "\1\0\7\40\1\0\14\40\1\0\4\40\1\0\5\40\1\0\1\40\3\0\14\40\2\0\10\40\1\0\2\40" +
                  "\1\0\1\40\2\0\1\40\1\0\12\40\1\0\4\40\1\0\1\40\1\0\1\40\6\0\1\40\4\0\1\40" +
                  "\1\0\1\40\1\0\1\40\1\0\3\40\1\0\2\40\1\0\1\40\2\0\1\40\1\0\1\40\1\0\1\40\1" +
                  "\0\1\40\1\0\1\40\1\0\2\40\1\0\1\40\2\0\4\40\1\0\7\40\1\0\4\40\1\0\4\40\1\0" +
                  "\1\40\1\0\12\40\1\0\5\40\1\0\3\40\1\0\5\40\1\0\5\40");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\1\0\1\1\1\2\22\3\1\1\1\4\1\5\1\6" +
                  "\1\7\1\10\2\3\1\11\2\3\3\1\1\12\1\1" +
                  "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\1" +
                  "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31" +
                  "\27\3\1\32\10\3\4\0\1\33\2\0\1\34\1\0" +
                  "\1\35\4\3\1\36\1\37\1\40\1\41\1\42\1\43" +
                  "\1\44\1\45\1\46\1\47\1\50\5\3\1\51\1\52" +
                  "\1\3\1\53\1\54\6\3\1\55\2\3\1\56\3\3" +
                  "\1\57\4\3\1\60\10\3\1\61\7\3\1\0\1\62" +
                  "\1\0\1\63\1\0\1\34\1\0\3\3\1\64\4\3" +
                  "\1\65\12\3\1\66\4\3\1\67\6\3\1\70\1\3" +
                  "\1\71\1\3\1\72\6\3\1\73\1\74\1\0\1\75" +
                  "\1\3\1\76\1\77\1\100\2\3\1\101\1\3\1\102" +
                  "\6\3\1\103\4\3\1\104\1\3\1\105\1\106\1\107" +
                  "\5\3\1\110\3\3\1\111\1\3\1\112\1\113\1\114" +
                  "\1\3\1\115\2\3\1\116\1\117\3\3\1\120\4\3" +
                  "\1\121\1\3\1\122\1\123\1\3\1\124\1\125\2\3" +
                  "\1\126\3\3\1\127\1\3\1\130\1\131\4\3\1\132" +
                  "\1\133\2\3\1\134\11\3\1\135\2\3\1\136\3\3" +
                  "\1\137\12\3\1\140\7\3\1\141\2\3\1\142\6\3" +
                  "\1\143\1\3\1\144\1\145\2\3\1\146\1\147\3\3" +
                  "\1\150\1\151\1\152";

    private static int[] zzUnpackAction() {
        int[] result = new int[346];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
        do {
            result[j++] = value;
        } while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8" +
                  "\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0\0\u0438" +
                  "\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630\0\u0678" +
                  "\0\110\0\u06c0\0\u0708\0\u0750\0\u0798\0\110\0\u07e0\0\u0828" +
                  "\0\u0870\0\u08b8\0\u0900\0\u0948\0\u0990\0\u09d8\0\u0a20\0\110" +
                  "\0\110\0\110\0\110\0\u0a68\0\u0ab0\0\110\0\110\0\110" +
                  "\0\110\0\110\0\110\0\110\0\u0af8\0\u0b40\0\u0b88\0\u0bd0" +
                  "\0\u0c18\0\u0c60\0\u0ca8\0\u0cf0\0\u0d38\0\u0d80\0\u0dc8\0\u0e10" +
                  "\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0\0\u1008\0\u1050" +
                  "\0\u1098\0\u10e0\0\u1128\0\u1170\0\u11b8\0\u1200\0\u1248\0\u1290" +
                  "\0\u12d8\0\u1320\0\u1368\0\u13b0\0\u13f8\0\u1440\0\u1488\0\u14d0" +
                  "\0\u1518\0\u1560\0\u15a8\0\u15f0\0\u1638\0\u0708\0\u0708\0\u1680" +
                  "\0\u16c8\0\u1710\0\u1758\0\110\0\110\0\110\0\110\0\110" +
                  "\0\110\0\110\0\110\0\110\0\110\0\110\0\u17a0\0\u17e8" +
                  "\0\u1830\0\u1878\0\u18c0\0\u0120\0\u0120\0\u1908\0\u0120\0\u0120" +
                  "\0\u1950\0\u1998\0\u19e0\0\u1a28\0\u1a70\0\u1ab8\0\u0120\0\u1b00" +
                  "\0\u1b48\0\u0120\0\u1b90\0\u1bd8\0\u1c20\0\u0120\0\u1c68\0\u1cb0" +
                  "\0\u1cf8\0\u1d40\0\u0120\0\u1d88\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8" +
                  "\0\u1ef0\0\u1f38\0\u1f80\0\u0120\0\u1fc8\0\u2010\0\u2058\0\u20a0" +
                  "\0\u20e8\0\u2130\0\u2178\0\u21c0\0\110\0\u2208\0\110\0\u2250" +
                  "\0\110\0\u2298\0\u22e0\0\u2328\0\u2370\0\u0120\0\u23b8\0\u2400" +
                  "\0\u2448\0\u2490\0\u24d8\0\u2520\0\u2568\0\u25b0\0\u25f8\0\u2640" +
                  "\0\u2688\0\u26d0\0\u2718\0\u2760\0\u27a8\0\u0120\0\u27f0\0\u2838" +
                  "\0\u2880\0\u28c8\0\u0120\0\u2910\0\u2958\0\u29a0\0\u29e8\0\u2a30" +
                  "\0\u2a78\0\u0120\0\u2ac0\0\u0120\0\u2b08\0\u0120\0\u2b50\0\u2b98" +
                  "\0\u2be0\0\u2c28\0\u2c70\0\u2cb8\0\u0120\0\110\0\u2d00\0\u15a8" +
                  "\0\u2d48\0\u0120\0\u0120\0\u0120\0\u2d90\0\u2dd8\0\u0120\0\u2e20" +
                  "\0\u0120\0\u2e68\0\u2eb0\0\u2ef8\0\u2f40\0\u2f88\0\u2fd0\0\u3018" +
                  "\0\u3060\0\u30a8\0\u30f0\0\u3138\0\u0120\0\u3180\0\u0120\0\u0120" +
                  "\0\u0120\0\u31c8\0\u3210\0\u3258\0\u32a0\0\u32e8\0\u0120\0\u3330" +
                  "\0\u3378\0\u33c0\0\u3408\0\u3450\0\110\0\u0120\0\u0120\0\u3498" +
                  "\0\u34e0\0\u3528\0\u3570\0\u0120\0\u35b8\0\u3600\0\u3648\0\u3690" +
                  "\0\u0120\0\u36d8\0\u3720\0\u3768\0\u37b0\0\u0120\0\u37f8\0\u0120" +
                  "\0\u0120\0\u3840\0\u0120\0\u0120\0\u3888\0\u38d0\0\u0120\0\u3918" +
                  "\0\u3960\0\u39a8\0\u0120\0\u39f0\0\u0120\0\u3a38\0\u3a80\0\u3ac8" +
                  "\0\u3b10\0\u3b58\0\u0120\0\u0120\0\u3ba0\0\u3be8\0\u0120\0\u3c30" +
                  "\0\u3c78\0\u3cc0\0\u3d08\0\u3d50\0\u3d98\0\u3de0\0\u3e28\0\u3e70" +
                  "\0\u0120\0\u3eb8\0\u3f00\0\u0120\0\u3f48\0\u3f90\0\u3fd8\0\u0120" +
                  "\0\u4020\0\u4068\0\u40b0\0\u40f8\0\u4140\0\u4188\0\u41d0\0\u4218" +
                  "\0\u4260\0\u42a8\0\u0120\0\u42f0\0\u4338\0\u4380\0\u43c8\0\u4410" +
                  "\0\u4458\0\u44a0\0\u0120\0\u44e8\0\u4530\0\u0120\0\u4578\0\u45c0" +
                  "\0\u4608\0\u4650\0\u4698\0\u46e0\0\u4728\0\u4770\0\u0120\0\u0120" +
                  "\0\u47b8\0\u4800\0\u0120\0\u0120\0\u4848\0\u4890\0\u48d8\0\u0120" +
                  "\0\u0120\0\u0120";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[346];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11" +
                  "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21" +
                  "\1\22\1\23\1\24\1\25\3\5\1\26\1\5\1\27" +
                  "\1\30\1\31\1\32\1\33\5\5\1\20\1\21\1\34" +
                  "\1\7\1\13\1\23\1\35\1\36\1\24\1\6\1\37" +
                  "\1\4\1\40\1\41\1\42\1\43\1\44\1\45\1\46" +
                  "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56" +
                  "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\10" +
                  "\111\0\3\3\110\0\1\5\1\66\3\5\1\67\1\5" +
                  "\1\70\1\5\1\71\16\5\5\0\2\5\1\66\5\5" +
                  "\1\70\2\5\1\0\2\5\1\71\2\5\25\0\1\5" +
                  "\4\0\30\5\5\0\13\5\1\0\5\5\25\0\1\5" +
                  "\4\0\1\72\10\5\1\73\1\74\3\5\1\75\11\5" +
                  "\5\0\13\5\1\0\2\5\1\73\1\72\1\75\25\0" +
                  "\1\5\4\0\1\5\1\76\26\5\5\0\2\5\1\76" +
                  "\10\5\1\0\5\5\25\0\1\5\4\0\7\5\1\77" +
                  "\20\5\5\0\10\5\1\77\2\5\1\0\5\5\25\0" +
                  "\1\5\4\0\2\5\1\100\25\5\5\0\13\5\1\0" +
                  "\1\5\1\100\3\5\25\0\1\5\4\0\5\5\1\101" +
                  "\1\5\1\102\10\5\1\103\7\5\5\0\10\5\1\102" +
                  "\2\5\1\0\1\103\4\5\25\0\1\5\4\0\20\5" +
                  "\1\104\7\5\5\0\13\5\1\0\1\104\4\5\25\0" +
                  "\1\5\4\0\25\5\1\105\2\5\5\0\13\5\1\0" +
                  "\5\5\25\0\1\5\4\0\1\5\1\106\1\107\11\5" +
                  "\1\110\13\5\5\0\2\5\1\106\1\5\1\110\6\5" +
                  "\1\0\1\5\1\107\3\5\25\0\1\5\4\0\3\5" +
                  "\1\111\24\5\5\0\7\5\1\111\3\5\1\0\5\5" +
                  "\25\0\1\5\4\0\7\5\1\112\4\5\1\113\10\5" +
                  "\1\114\2\5\5\0\4\5\1\113\3\5\1\112\2\5" +
                  "\1\0\5\5\25\0\1\5\4\0\16\5\1\115\11\5" +
                  "\5\0\13\5\1\0\4\5\1\115\25\0\1\5\4\0" +
                  "\1\5\1\116\12\5\1\117\13\5\5\0\2\5\1\116" +
                  "\1\5\1\117\6\5\1\0\5\5\25\0\1\5\4\0" +
                  "\10\5\1\120\7\5\1\121\7\5\5\0\12\5\1\120" +
                  "\1\0\1\121\4\5\25\0\1\5\4\0\14\5\1\122" +
                  "\13\5\5\0\4\5\1\122\6\5\1\0\5\5\25\0" +
                  "\1\5\4\0\6\5\1\123\7\5\1\124\11\5\5\0" +
                  "\13\5\1\0\4\5\1\124\25\0\1\5\4\0\14\5" +
                  "\1\125\13\5\5\0\4\5\1\125\6\5\1\0\5\5" +
                  "\25\0\1\5\42\0\1\126\2\0\1\127\1\0\1\130" +
                  "\3\0\1\131\67\0\1\27\110\0\1\132\1\133\52\0" +
                  "\36\134\1\135\51\134\1\136\2\0\34\136\1\137\50\136" +
                  "\4\0\7\5\1\112\4\5\1\113\13\5\5\0\4\5" +
                  "\1\113\3\5\1\112\2\5\1\0\1\5\1\140\3\5" +
                  "\25\0\1\5\4\0\30\5\5\0\7\5\1\141\3\5" +
                  "\1\0\5\5\25\0\1\5\4\0\1\5\1\106\1\107" +
                  "\11\5\1\110\13\5\5\0\2\5\1\106\1\5\1\142" +
                  "\6\5\1\0\1\5\1\107\3\5\25\0\1\5\4\0" +
                  "\10\5\1\120\7\5\1\121\7\5\5\0\10\5\1\143" +
                  "\1\5\1\120\1\0\1\121\4\5\25\0\1\5\62\0" +
                  "\1\144\110\0\1\145\111\0\1\146\1\147\106\0\1\150" +
                  "\107\0\1\151\107\0\1\152\107\0\1\153\117\0\1\154" +
                  "\110\0\1\155\113\0\1\156\11\0\2\5\1\157\25\5" +
                  "\5\0\13\5\1\0\1\5\1\157\3\5\25\0\1\5" +
                  "\4\0\7\5\1\160\4\5\1\161\13\5\5\0\4\5" +
                  "\1\161\3\5\1\160\2\5\1\0\5\5\25\0\1\5" +
                  "\4\0\3\5\1\162\24\5\5\0\7\5\1\162\3\5" +
                  "\1\0\5\5\25\0\1\5\4\0\14\5\1\163\13\5" +
                  "\5\0\4\5\1\163\6\5\1\0\5\5\25\0\1\5" +
                  "\4\0\4\5\1\164\23\5\5\0\13\5\1\0\5\5" +
                  "\25\0\1\164\4\0\11\5\1\165\16\5\5\0\13\5" +
                  "\1\0\2\5\1\165\2\5\25\0\1\5\4\0\12\5" +
                  "\1\166\15\5\5\0\13\5\1\0\5\5\25\0\1\5" +
                  "\4\0\15\5\1\167\6\5\1\170\3\5\5\0\3\5" +
                  "\1\170\1\5\1\167\5\5\1\0\5\5\25\0\1\5" +
                  "\4\0\6\5\1\171\1\5\1\172\6\5\1\173\2\5" +
                  "\1\174\5\5\5\0\11\5\1\173\1\172\1\0\5\5" +
                  "\25\0\1\5\4\0\11\5\1\175\6\5\1\176\7\5" +
                  "\5\0\13\5\1\0\1\176\1\5\1\175\2\5\25\0" +
                  "\1\5\4\0\1\177\27\5\5\0\13\5\1\0\3\5" +
                  "\1\177\1\5\25\0\1\5\4\0\3\5\1\200\24\5" +
                  "\5\0\7\5\1\200\3\5\1\0\5\5\25\0\1\5" +
                  "\4\0\1\201\5\5\1\202\21\5\5\0\13\5\1\0" +
                  "\3\5\1\201\1\5\25\0\1\5\4\0\1\203\27\5" +
                  "\5\0\13\5\1\0\3\5\1\203\1\5\25\0\1\5" +
                  "\4\0\10\5\1\204\17\5\5\0\12\5\1\204\1\0" +
                  "\5\5\25\0\1\5\4\0\16\5\1\205\11\5\5\0" +
                  "\13\5\1\0\5\5\25\0\1\5\4\0\10\5\1\206" +
                  "\5\5\1\207\11\5\5\0\12\5\1\206\1\0\4\5" +
                  "\1\207\25\0\1\5\4\0\1\210\27\5\5\0\13\5" +
                  "\1\0\3\5\1\210\1\5\25\0\1\5\4\0\17\5" +
                  "\1\211\10\5\5\0\11\5\1\211\1\5\1\0\5\5" +
                  "\25\0\1\5\4\0\2\5\1\212\25\5\5\0\13\5" +
                  "\1\0\1\5\1\212\3\5\25\0\1\5\4\0\3\5" +
                  "\1\213\24\5\5\0\7\5\1\213\3\5\1\0\5\5" +
                  "\25\0\1\5\4\0\3\5\1\214\5\5\1\215\16\5" +
                  "\5\0\7\5\1\214\3\5\1\0\2\5\1\215\2\5" +
                  "\25\0\1\5\4\0\7\5\1\216\20\5\5\0\13\5" +
                  "\1\0\5\5\25\0\1\5\4\0\1\217\7\5\1\220" +
                  "\12\5\1\221\4\5\5\0\12\5\1\220\1\0\3\5" +
                  "\1\217\1\5\25\0\1\5\4\0\1\222\27\5\5\0" +
                  "\13\5\1\0\3\5\1\222\1\5\25\0\1\5\4\0" +
                  "\1\223\27\5\5\0\13\5\1\0\3\5\1\223\1\5" +
                  "\25\0\1\5\4\0\5\5\1\224\22\5\5\0\13\5" +
                  "\1\0\5\5\25\0\1\5\4\0\11\5\1\225\16\5" +
                  "\5\0\13\5\1\0\2\5\1\225\2\5\25\0\1\5" +
                  "\4\0\16\5\1\226\11\5\5\0\13\5\1\0\4\5" +
                  "\1\226\25\0\1\5\4\0\1\227\14\5\1\230\12\5" +
                  "\5\0\5\5\1\230\5\5\1\0\3\5\1\227\1\5" +
                  "\25\0\1\5\4\0\1\231\13\5\1\232\13\5\5\0" +
                  "\4\5\1\232\6\5\1\0\3\5\1\231\1\5\25\0" +
                  "\1\5\4\0\10\5\1\233\17\5\5\0\12\5\1\233" +
                  "\1\0\5\5\25\0\1\5\43\0\1\234\112\0\1\235" +
                  "\111\0\1\236\110\0\1\237\36\0\1\132\2\0\105\132" +
                  "\1\133\1\0\33\133\1\240\52\133\36\134\1\241\51\134" +
                  "\36\0\1\242\55\0\30\5\5\0\13\5\1\0\2\5" +
                  "\1\243\2\5\25\0\1\5\4\0\30\5\5\0\13\5" +
                  "\1\0\1\244\4\5\25\0\1\5\4\0\17\5\1\211" +
                  "\10\5\5\0\1\5\1\245\7\5\1\211\1\5\1\0" +
                  "\5\5\25\0\1\5\4\0\30\5\5\0\12\5\1\246" +
                  "\1\0\4\5\1\247\25\0\1\5\4\0\3\5\1\250" +
                  "\24\5\5\0\7\5\1\250\3\5\1\0\5\5\25\0" +
                  "\1\5\4\0\3\5\1\251\24\5\5\0\7\5\1\251" +
                  "\3\5\1\0\5\5\25\0\1\5\4\0\13\5\1\252" +
                  "\14\5\5\0\6\5\1\252\4\5\1\0\5\5\25\0" +
                  "\1\5\4\0\10\5\1\253\17\5\5\0\12\5\1\253" +
                  "\1\0\5\5\25\0\1\5\4\0\4\5\1\254\23\5" +
                  "\5\0\13\5\1\0\5\5\25\0\1\254\4\0\3\5" +
                  "\1\255\24\5\5\0\7\5\1\255\3\5\1\0\5\5" +
                  "\25\0\1\5\4\0\11\5\1\256\16\5\5\0\13\5" +
                  "\1\0\2\5\1\256\2\5\25\0\1\5\4\0\20\5" +
                  "\1\257\7\5\5\0\13\5\1\0\1\257\4\5\25\0" +
                  "\1\5\4\0\7\5\1\260\20\5\5\0\10\5\1\260" +
                  "\2\5\1\0\5\5\25\0\1\5\4\0\1\5\1\261" +
                  "\26\5\5\0\2\5\1\261\10\5\1\0\5\5\25\0" +
                  "\1\5\4\0\11\5\1\262\16\5\5\0\13\5\1\0" +
                  "\2\5\1\262\2\5\25\0\1\5\4\0\16\5\1\263" +
                  "\11\5\5\0\13\5\1\0\4\5\1\263\25\0\1\5" +
                  "\4\0\2\5\1\264\25\5\5\0\13\5\1\0\1\5" +
                  "\1\264\3\5\25\0\1\5\4\0\14\5\1\265\13\5" +
                  "\5\0\4\5\1\265\6\5\1\0\5\5\25\0\1\5" +
                  "\4\0\5\5\1\266\22\5\5\0\13\5\1\0\5\5" +
                  "\25\0\1\5\4\0\1\5\1\267\21\5\1\270\4\5" +
                  "\5\0\2\5\1\267\10\5\1\0\5\5\25\0\1\5" +
                  "\4\0\14\5\1\271\13\5\5\0\13\5\1\0\5\5" +
                  "\25\0\1\5\4\0\16\5\1\272\11\5\5\0\13\5" +
                  "\1\0\4\5\1\272\25\0\1\5\4\0\10\5\1\273" +
                  "\17\5\5\0\12\5\1\273\1\0\5\5\25\0\1\5" +
                  "\4\0\14\5\1\274\13\5\5\0\4\5\1\274\6\5" +
                  "\1\0\5\5\25\0\1\5\4\0\6\5\1\275\21\5" +
                  "\5\0\13\5\1\0\5\5\25\0\1\5\4\0\1\276" +
                  "\27\5\5\0\13\5\1\0\3\5\1\276\1\5\25\0" +
                  "\1\5\4\0\10\5\1\277\17\5\5\0\12\5\1\277" +
                  "\1\0\5\5\25\0\1\5\4\0\20\5\1\300\7\5" +
                  "\5\0\13\5\1\0\5\5\25\0\1\5\4\0\1\5" +
                  "\1\301\26\5\5\0\2\5\1\301\10\5\1\0\5\5" +
                  "\25\0\1\5\4\0\7\5\1\302\20\5\5\0\10\5" +
                  "\1\302\2\5\1\0\5\5\25\0\1\5\4\0\2\5" +
                  "\1\303\25\5\5\0\13\5\1\0\1\5\1\303\3\5" +
                  "\25\0\1\5\4\0\4\5\1\304\23\5\5\0\13\5" +
                  "\1\0\5\5\25\0\1\304\4\0\10\5\1\305\17\5" +
                  "\5\0\12\5\1\305\1\0\5\5\25\0\1\5\4\0" +
                  "\11\5\1\306\16\5\5\0\13\5\1\0\2\5\1\306" +
                  "\2\5\25\0\1\5\4\0\20\5\1\307\7\5\5\0" +
                  "\13\5\1\0\1\307\4\5\25\0\1\5\4\0\1\5" +
                  "\1\310\26\5\5\0\2\5\1\310\10\5\1\0\5\5" +
                  "\25\0\1\5\4\0\2\5\1\311\25\5\5\0\13\5" +
                  "\1\0\1\5\1\311\3\5\25\0\1\5\4\0\5\5" +
                  "\1\312\22\5\5\0\13\5\1\0\5\5\25\0\1\5" +
                  "\4\0\7\5\1\313\16\5\1\314\1\5\5\0\10\5" +
                  "\1\313\2\5\1\0\5\5\25\0\1\5\4\0\5\5" +
                  "\1\315\22\5\5\0\13\5\1\0\5\5\25\0\1\5" +
                  "\44\0\1\316\114\0\1\317\36\0\1\133\1\0\32\133" +
                  "\1\320\1\240\52\133\36\0\1\241\55\0\30\5\5\0" +
                  "\13\5\1\0\3\5\1\321\1\5\25\0\1\5\4\0" +
                  "\30\5\5\0\2\5\1\322\10\5\1\0\5\5\25\0" +
                  "\1\5\4\0\30\5\5\0\2\5\1\323\10\5\1\0" +
                  "\5\5\25\0\1\5\4\0\30\5\5\0\2\5\1\324" +
                  "\10\5\1\0\5\5\25\0\1\5\4\0\4\5\1\325" +
                  "\23\5\5\0\13\5\1\0\5\5\25\0\1\325\4\0" +
                  "\10\5\1\326\17\5\5\0\12\5\1\326\1\0\5\5" +
                  "\25\0\1\5\4\0\10\5\1\327\17\5\5\0\12\5" +
                  "\1\327\1\0\5\5\25\0\1\5\4\0\1\5\1\330" +
                  "\26\5\5\0\2\5\1\330\10\5\1\0\5\5\25\0" +
                  "\1\5\4\0\1\5\1\331\26\5\5\0\2\5\1\331" +
                  "\10\5\1\0\5\5\25\0\1\5\4\0\1\5\1\332" +
                  "\26\5\5\0\2\5\1\332\10\5\1\0\5\5\25\0" +
                  "\1\5\4\0\2\5\1\333\25\5\5\0\13\5\1\0" +
                  "\1\5\1\333\3\5\25\0\1\5\4\0\3\5\1\334" +
                  "\24\5\5\0\7\5\1\334\3\5\1\0\5\5\25\0" +
                  "\1\5\4\0\22\5\1\335\5\5\5\0\13\5\1\0" +
                  "\5\5\25\0\1\5\4\0\3\5\1\336\24\5\5\0" +
                  "\7\5\1\336\3\5\1\0\5\5\25\0\1\5\4\0" +
                  "\1\5\1\337\26\5\5\0\2\5\1\337\10\5\1\0" +
                  "\5\5\25\0\1\5\4\0\10\5\1\340\17\5\5\0" +
                  "\12\5\1\340\1\0\5\5\25\0\1\5\4\0\1\341" +
                  "\27\5\5\0\13\5\1\0\3\5\1\341\1\5\25\0" +
                  "\1\5\4\0\10\5\1\342\17\5\5\0\12\5\1\342" +
                  "\1\0\5\5\25\0\1\5\4\0\3\5\1\343\24\5" +
                  "\5\0\7\5\1\343\3\5\1\0\5\5\25\0\1\5" +
                  "\4\0\2\5\1\344\25\5\5\0\13\5\1\0\1\5" +
                  "\1\344\3\5\25\0\1\5\4\0\16\5\1\345\11\5" +
                  "\5\0\13\5\1\0\5\5\25\0\1\5\4\0\12\5" +
                  "\1\346\15\5\5\0\13\5\1\0\5\5\25\0\1\5" +
                  "\4\0\10\5\1\347\17\5\5\0\12\5\1\347\1\0" +
                  "\5\5\25\0\1\5\4\0\5\5\1\350\22\5\5\0" +
                  "\13\5\1\0\5\5\25\0\1\5\4\0\10\5\1\351" +
                  "\17\5\5\0\12\5\1\351\1\0\5\5\25\0\1\5" +
                  "\4\0\1\5\1\352\26\5\5\0\2\5\1\352\10\5" +
                  "\1\0\5\5\25\0\1\5\4\0\10\5\1\353\17\5" +
                  "\5\0\13\5\1\0\5\5\25\0\1\5\4\0\3\5" +
                  "\1\354\24\5\5\0\7\5\1\354\3\5\1\0\5\5" +
                  "\25\0\1\5\4\0\16\5\1\355\11\5\5\0\13\5" +
                  "\1\0\4\5\1\355\25\0\1\5\4\0\14\5\1\356" +
                  "\13\5\5\0\4\5\1\356\6\5\1\0\5\5\25\0" +
                  "\1\5\4\0\1\357\27\5\5\0\13\5\1\0\3\5" +
                  "\1\357\1\5\25\0\1\5\4\0\3\5\1\360\24\5" +
                  "\5\0\7\5\1\360\3\5\1\0\5\5\25\0\1\5" +
                  "\4\0\10\5\1\361\17\5\5\0\12\5\1\361\1\0" +
                  "\5\5\25\0\1\5\4\0\14\5\1\362\13\5\5\0" +
                  "\4\5\1\362\6\5\1\0\5\5\25\0\1\5\4\0" +
                  "\16\5\1\363\11\5\5\0\13\5\1\0\4\5\1\363" +
                  "\25\0\1\5\4\0\20\5\1\364\7\5\5\0\13\5" +
                  "\1\0\1\364\4\5\25\0\1\5\52\0\1\365\41\0" +
                  "\30\5\5\0\2\5\1\366\10\5\1\0\5\5\25\0" +
                  "\1\5\4\0\5\5\1\367\22\5\5\0\13\5\1\0" +
                  "\5\5\25\0\1\5\4\0\1\5\1\370\26\5\5\0" +
                  "\2\5\1\370\10\5\1\0\5\5\25\0\1\5\4\0" +
                  "\15\5\1\371\12\5\5\0\5\5\1\371\5\5\1\0" +
                  "\5\5\25\0\1\5\4\0\12\5\1\372\15\5\5\0" +
                  "\13\5\1\0\5\5\25\0\1\5\4\0\4\5\1\373" +
                  "\23\5\5\0\13\5\1\0\5\5\25\0\1\373\4\0" +
                  "\16\5\1\374\11\5\5\0\13\5\1\0\4\5\1\374" +
                  "\25\0\1\5\4\0\1\5\1\375\26\5\5\0\2\5" +
                  "\1\375\10\5\1\0\5\5\25\0\1\5\4\0\1\376" +
                  "\27\5\5\0\13\5\1\0\3\5\1\376\1\5\25\0" +
                  "\1\5\4\0\4\5\1\377\23\5\5\0\13\5\1\0" +
                  "\5\5\25\0\1\377\4\0\25\5\1\u0100\2\5\5\0" +
                  "\13\5\1\0\5\5\25\0\1\5\4\0\1\5\1\u0101" +
                  "\26\5\5\0\2\5\1\u0101\10\5\1\0\5\5\25\0" +
                  "\1\5\4\0\14\5\1\u0102\13\5\5\0\4\5\1\u0102" +
                  "\6\5\1\0\5\5\25\0\1\5\4\0\1\u0103\27\5" +
                  "\5\0\13\5\1\0\3\5\1\u0103\1\5\25\0\1\5" +
                  "\4\0\16\5\1\u0104\11\5\5\0\13\5\1\0\4\5" +
                  "\1\u0104\25\0\1\5\4\0\10\5\1\u0105\17\5\5\0" +
                  "\12\5\1\u0105\1\0\5\5\25\0\1\5\4\0\3\5" +
                  "\1\u0106\24\5\5\0\7\5\1\u0106\3\5\1\0\5\5" +
                  "\25\0\1\5\4\0\1\5\1\u0107\26\5\5\0\13\5" +
                  "\1\0\5\5\25\0\1\5\4\0\10\5\1\u0108\17\5" +
                  "\5\0\12\5\1\u0108\1\0\5\5\25\0\1\5\4\0" +
                  "\15\5\1\u0109\12\5\5\0\5\5\1\u0109\5\5\1\0" +
                  "\5\5\25\0\1\5\4\0\16\5\1\u010a\11\5\5\0" +
                  "\13\5\1\0\4\5\1\u010a\25\0\1\5\4\0\10\5" +
                  "\1\u010b\17\5\5\0\12\5\1\u010b\1\0\5\5\25\0" +
                  "\1\5\4\0\1\5\1\u010c\26\5\5\0\2\5\1\u010c" +
                  "\10\5\1\0\5\5\25\0\1\5\4\0\13\5\1\u010d" +
                  "\14\5\5\0\6\5\1\u010d\4\5\1\0\5\5\25\0" +
                  "\1\5\4\0\25\5\1\u010e\2\5\5\0\13\5\1\0" +
                  "\5\5\25\0\1\5\4\0\1\5\1\u010f\26\5\5\0" +
                  "\2\5\1\u010f\10\5\1\0\5\5\25\0\1\5\4\0" +
                  "\1\u0110\27\5\5\0\13\5\1\0\3\5\1\u0110\1\5" +
                  "\25\0\1\5\4\0\25\5\1\u0111\2\5\5\0\13\5" +
                  "\1\0\5\5\25\0\1\5\4\0\2\5\1\u0112\25\5" +
                  "\5\0\13\5\1\0\1\5\1\u0112\3\5\25\0\1\5" +
                  "\4\0\1\5\1\u0113\26\5\5\0\2\5\1\u0113\10\5" +
                  "\1\0\5\5\25\0\1\5\4\0\25\5\1\u0114\2\5" +
                  "\5\0\13\5\1\0\5\5\25\0\1\5\4\0\1\5" +
                  "\1\u0115\26\5\5\0\2\5\1\u0115\10\5\1\0\5\5" +
                  "\25\0\1\5\4\0\10\5\1\u0116\17\5\5\0\12\5" +
                  "\1\u0116\1\0\5\5\25\0\1\5\4\0\15\5\1\u0117" +
                  "\2\5\1\u0118\7\5\5\0\5\5\1\u0117\5\5\1\0" +
                  "\1\u0118\4\5\25\0\1\5\4\0\7\5\1\u0119\20\5" +
                  "\5\0\10\5\1\u0119\2\5\1\0\5\5\25\0\1\5" +
                  "\4\0\1\5\1\u011a\26\5\5\0\2\5\1\u011a\10\5" +
                  "\1\0\5\5\25\0\1\5\4\0\15\5\1\u011b\12\5" +
                  "\5\0\5\5\1\u011b\5\5\1\0\5\5\25\0\1\5" +
                  "\4\0\5\5\1\u011c\22\5\5\0\13\5\1\0\5\5" +
                  "\25\0\1\5\4\0\3\5\1\u011d\24\5\5\0\13\5" +
                  "\1\0\5\5\25\0\1\5\4\0\4\5\1\u011e\23\5" +
                  "\5\0\13\5\1\0\5\5\25\0\1\u011e\4\0\10\5" +
                  "\1\u011f\17\5\5\0\12\5\1\u011f\1\0\5\5\25\0" +
                  "\1\5\4\0\15\5\1\u0120\12\5\5\0\5\5\1\u0120" +
                  "\5\5\1\0\5\5\25\0\1\5\4\0\6\5\1\u0121" +
                  "\21\5\5\0\13\5\1\0\5\5\25\0\1\5\4\0" +
                  "\20\5\1\u0122\7\5\5\0\13\5\1\0\1\u0122\4\5" +
                  "\25\0\1\5\4\0\10\5\1\u0123\17\5\5\0\12\5" +
                  "\1\u0123\1\0\5\5\25\0\1\5\4\0\16\5\1\u0124" +
                  "\3\5\1\u0125\5\5\5\0\13\5\1\0\4\5\1\u0124" +
                  "\25\0\1\5\4\0\14\5\1\u0126\13\5\5\0\4\5" +
                  "\1\u0126\6\5\1\0\5\5\25\0\1\5\4\0\14\5" +
                  "\1\u0127\13\5\5\0\4\5\1\u0127\6\5\1\0\5\5" +
                  "\25\0\1\5\4\0\16\5\1\u0128\11\5\5\0\13\5" +
                  "\1\0\4\5\1\u0128\25\0\1\5\4\0\16\5\1\u0129" +
                  "\11\5\5\0\13\5\1\0\4\5\1\u0129\25\0\1\5" +
                  "\4\0\4\5\1\u012a\23\5\5\0\13\5\1\0\5\5" +
                  "\25\0\1\u012a\4\0\1\u012b\27\5\5\0\13\5\1\0" +
                  "\5\5\25\0\1\5\4\0\10\5\1\u012c\17\5\5\0" +
                  "\12\5\1\u012c\1\0\5\5\25\0\1\5\4\0\14\5" +
                  "\1\u012d\13\5\5\0\4\5\1\u012d\6\5\1\0\5\5" +
                  "\25\0\1\5\4\0\2\5\1\u012e\25\5\5\0\13\5" +
                  "\1\0\1\5\1\u012e\3\5\25\0\1\5\4\0\16\5" +
                  "\1\u012f\11\5\5\0\13\5\1\0\4\5\1\u012f\25\0" +
                  "\1\5\4\0\1\5\1\u0130\26\5\5\0\2\5\1\u0130" +
                  "\10\5\1\0\5\5\25\0\1\5\4\0\10\5\1\u0131" +
                  "\17\5\5\0\12\5\1\u0131\1\0\5\5\25\0\1\5" +
                  "\4\0\2\5\1\u0132\25\5\5\0\13\5\1\0\1\5" +
                  "\1\u0132\3\5\25\0\1\5\4\0\7\5\1\u0133\20\5" +
                  "\5\0\10\5\1\u0133\2\5\1\0\5\5\25\0\1\5" +
                  "\4\0\1\u0134\27\5\5\0\13\5\1\0\3\5\1\u0134" +
                  "\1\5\25\0\1\5\4\0\14\5\1\u0135\13\5\5\0" +
                  "\4\5\1\u0135\6\5\1\0\5\5\25\0\1\5\4\0" +
                  "\10\5\1\u0136\17\5\5\0\12\5\1\u0136\1\0\5\5" +
                  "\25\0\1\5\4\0\1\5\1\u0137\26\5\5\0\13\5" +
                  "\1\0\5\5\25\0\1\5\4\0\1\u0138\27\5\5\0" +
                  "\13\5\1\0\3\5\1\u0138\1\5\25\0\1\5\4\0" +
                  "\10\5\1\u0139\17\5\5\0\12\5\1\u0139\1\0\5\5" +
                  "\25\0\1\5\4\0\14\5\1\u013a\13\5\5\0\4\5" +
                  "\1\u013a\6\5\1\0\5\5\25\0\1\5\4\0\5\5" +
                  "\1\u013b\22\5\5\0\13\5\1\0\5\5\25\0\1\5" +
                  "\4\0\11\5\1\u013c\16\5\5\0\13\5\1\0\2\5" +
                  "\1\u013c\2\5\25\0\1\5\4\0\16\5\1\u013d\11\5" +
                  "\5\0\13\5\1\0\4\5\1\u013d\25\0\1\5\4\0" +
                  "\10\5\1\u013e\17\5\5\0\12\5\1\u013e\1\0\5\5" +
                  "\25\0\1\5\4\0\26\5\1\u013f\1\5\5\0\13\5" +
                  "\1\0\5\5\25\0\1\5\4\0\14\5\1\u0140\13\5" +
                  "\5\0\4\5\1\u0140\6\5\1\0\5\5\25\0\1\5" +
                  "\4\0\30\5\5\0\13\5\1\0\5\5\25\0\1\u0141" +
                  "\4\0\10\5\1\u0142\17\5\5\0\12\5\1\u0142\1\0" +
                  "\5\5\25\0\1\5\4\0\5\5\1\u0143\22\5\5\0" +
                  "\13\5\1\0\5\5\25\0\1\5\4\0\26\5\1\u0144" +
                  "\1\5\5\0\13\5\1\0\5\5\25\0\1\5\4\0" +
                  "\20\5\1\u0145\7\5\5\0\13\5\1\0\1\u0145\4\5" +
                  "\25\0\1\5\4\0\1\u0146\27\5\5\0\13\5\1\0" +
                  "\3\5\1\u0146\1\5\25\0\1\5\4\0\14\5\1\u0147" +
                  "\13\5\5\0\4\5\1\u0147\6\5\1\0\5\5\25\0" +
                  "\1\5\4\0\20\5\1\u0148\7\5\5\0\13\5\1\0" +
                  "\1\u0148\4\5\25\0\1\5\4\0\7\5\1\u0149\20\5" +
                  "\5\0\10\5\1\u0149\2\5\1\0\5\5\25\0\1\5" +
                  "\4\0\10\5\1\u014a\17\5\5\0\13\5\1\0\5\5" +
                  "\25\0\1\5\4\0\14\5\1\u014b\13\5\5\0\4\5" +
                  "\1\u014b\6\5\1\0\5\5\25\0\1\5\4\0\20\5" +
                  "\1\u014c\7\5\5\0\13\5\1\0\1\u014c\4\5\25\0" +
                  "\1\5\4\0\1\5\1\u014d\26\5\5\0\2\5\1\u014d" +
                  "\10\5\1\0\5\5\25\0\1\5\4\0\16\5\1\u014e" +
                  "\11\5\5\0\13\5\1\0\4\5\1\u014e\25\0\1\5" +
                  "\4\0\1\5\1\u014f\26\5\5\0\2\5\1\u014f\10\5" +
                  "\1\0\5\5\25\0\1\5\4\0\16\5\1\u0150\11\5" +
                  "\5\0\13\5\1\0\4\5\1\u0150\25\0\1\5\4\0" +
                  "\14\5\1\u0151\13\5\5\0\13\5\1\0\5\5\25\0" +
                  "\1\5\4\0\16\5\1\u0152\11\5\5\0\13\5\1\0" +
                  "\4\5\1\u0152\25\0\1\5\4\0\1\5\1\u0153\26\5" +
                  "\5\0\2\5\1\u0153\10\5\1\0\5\5\25\0\1\5" +
                  "\4\0\1\u0154\27\5\5\0\13\5\1\0\3\5\1\u0154" +
                  "\1\5\25\0\1\5\4\0\4\5\1\u0155\23\5\5\0" +
                  "\13\5\1\0\5\5\25\0\1\u0155\4\0\7\5\1\u0156" +
                  "\20\5\5\0\13\5\1\0\5\5\25\0\1\5\4\0" +
                  "\4\5\1\u0157\23\5\5\0\13\5\1\0\5\5\25\0" +
                  "\1\u0157\4\0\10\5\1\u0158\17\5\5\0\12\5\1\u0158" +
                  "\1\0\5\5\25\0\1\5\4\0\16\5\1\u0159\11\5" +
                  "\5\0\13\5\1\0\5\5\25\0\1\5\4\0\10\5" +
                  "\1\u015a\17\5\5\0\12\5\1\u015a\1\0\5\5\25\0" +
                  "\1\5";

    private static int[] zzUnpackTrans() {
        int[] result = new int[18720];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
        value--;
        do {
            result[j++] = value;
        } while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
          "Unknown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\1\0\1\11\26\1\1\11\4\1\1\11\11\1\4\11" +
                  "\2\1\7\11\41\1\4\0\1\1\2\0\1\1\1\0" +
                  "\5\1\13\11\55\1\1\0\1\11\1\0\1\11\1\0" +
                  "\1\11\1\0\53\1\1\11\1\0\45\1\1\11\145\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[346];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
        do {
            result[j++] = value;
        } while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
   the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
   from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _AqlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _AqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return the unpacked character translation table
   */
  private static char[] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
        int count = packed.charAt(i++);
      char value = packed.charAt(i++);
        do {
            map[j++] = value;
        } while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
      return zzMarkedPos -zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number) {
      if (number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return the next token
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

      int[] zzTransL = ZZ_TRANS;
      int[] zzRowMapL = ZZ_ROWMAP;
      int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
        if ((zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          } else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
              zzCurrentPos = zzCurrentPosL;
              zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
              zzCurrentPosL = zzCurrentPos;
              zzMarkedPosL = zzMarkedPos;
              zzBufferL = zzBuffer;
              zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
            int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
            if (zzNext == -1) {
                break zzForAction;
            }
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
                if ((zzAttributes & 8) == 8) {
                    break zzForAction;
                }
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      } else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
            case 1: {
                return BAD_CHARACTER;
            } 
            // fall through
            case 107:
                break;
            case 2: {
                return WHITE_SPACE;
            } 
            // fall through
            case 108:
                break;
            case 3: { return ID;
            } 
            // fall through
            case 109:
                break;
            case 4: {
                return NUMBER_INTEGER;
            } 
            // fall through
            case 110:
                break;
            case 5: {
                return T_DIV;
            } 
            // fall through
            case 111:
                break;
            case 6: {
                return T_TIMES;
            } 
            // fall through
            case 112:
                break;
            case 7: {
                return SINGLE_QUOTE;
            } 
            // fall through
            case 113:
                break;
            case 8: {
                return DOUBLE_QUOTE;
            } 
            // fall through
            case 114:
                break;
            case 9: {
                return T_AT;
            } 
            // fall through
            case 115:
                break;
            case 10: {
                return T_IS;
            } 
            // fall through
            case 116:
                break;
            case 11: {
                return T_LT;
            } 
            // fall through
            case 117:
                break;
            case 12: {
                return T_GT;
            } 
            // fall through
            case 118:
                break;
            case 13: {
                return T_PLUS;
            } 
            // fall through
            case 119:
                break;
            case 14: {
                return T_MINUS;
            } 
            // fall through
            case 120:
                break;
            case 15: {
                return T_MOD;
            } 
            // fall through
            case 121:
                break;
            case 16: {
                return T_QUESTION;
            } 
            // fall through
            case 122:
                break;
            case 17: {
                return T_COLON;
            } 
            // fall through
            case 123:
                break;
            case 18: {
                return T_COMMA;
            } 
            // fall through
            case 124:
                break;
            case 19: {
                return T_OPEN;
            } 
            // fall through
            case 125:
                break;
            case 20: {
                return T_CLOSE;
            } 
            // fall through
            case 126:
                break;
            case 21: {
                return T_OBJECT_OPEN;
            } 
            // fall through
            case 127:
                break;
            case 22: {
                return T_OBJECT_CLOSE;
            } 
            // fall through
            case 128:
                break;
            case 23: {
                return T_ARRAY_OPEN;
            } 
            // fall through
            case 129:
                break;
            case 24: {
                return T_ARRAY_CLOSE;
            } 
            // fall through
            case 130:
                break;
            case 25: {
                return DOLLAR;
            } 
            // fall through
            case 131:
                break;
            case 26: {
                return T_IN;
            } 
            // fall through
            case 132:
                break;
            case 27: {
                return L_COMMENT;
            } 
            // fall through
            case 133:
                break;
            case 28: {
                return TEXT_SINGLE;
            } 
            // fall through
            case 134:
                break;
            case 29: {
                return TEXT_DOUBLE;
            } 
            // fall through
            case 135:
                break;
            case 30: {
                return T_LOGICAL_AND;
            } 
            // fall through
            case 136:
                break;
            case 31: {
                return T_OR;
            } 
            // fall through
            case 137:
                break;
            case 32: {
                return T_REGEX_MATCH;
            } 
            // fall through
            case 138:
                break;
            case 33: {
                return T_REGEX_NON_MATCH;
            } 
            // fall through
            case 139:
                break;
            case 34: {
                return T_EQ;
            } 
            // fall through
            case 140:
                break;
            case 35: {
                return T_NE;
            } 
            // fall through
            case 141:
                break;
            case 36: {
                return T_LE;
            } 
            // fall through
            case 142:
                break;
            case 37: {
                return T_GE;
            } 
            // fall through
            case 143:
                break;
            case 38: {
                return T_SCOPE;
            } 
            // fall through
            case 144:
                break;
            case 39: {
                return T_RANGE;
            } 
            // fall through
            case 145:
                break;
            case 40: {
                return OBJECT_START;
            } 
            // fall through
            case 146:
                break;
            case 41: {
                return T_ASC;
            } 
            // fall through
            case 147:
                break;
            case 42: {
                return T_ALL;
            } 
            // fall through
            case 148:
                break;
            case 43: {
                return T_AND;
            } 
            // fall through
            case 149:
                break;
            case 44: {
                return T_ANY;
            } 
            // fall through
            case 150:
                break;
            case 45: {
                return F_HAS;
            } 
            // fall through
            case 151:
                break;
            case 46: {
                return F_POP;
            } 
            // fall through
            case 152:
                break;
            case 47: {
                return T_LET;
            } 
            // fall through
            case 153:
                break;
            case 48: {
                return T_FOR;
            } 
            // fall through
            case 154:
                break;
            case 49: {
                return F_NTH;
            } 
            // fall through
            case 155:
                break;
            case 50: {
                return T_ID;
            } 
            // fall through
            case 156:
                break;
            case 51: {
                return T_SYS_TO;
            } 
            // fall through
            case 157:
                break;
            case 52: {
                return T_NOT;
            } 
            // fall through
            case 158:
                break;
            case 53: {
                return T_SORT;
            } 
            // fall through
            case 159:
                break;
            case 54: {
                return F_PUSH;
            } 
            // fall through
            case 160:
                break;
            case 55: {
                return F_LAST;
            } 
            // fall through
            case 161:
                break;
            case 56: {
                return T_INTO;
            } 
            // fall through
            case 162:
                break;
            case 57: {
                return T_DESC;
            } 
            // fall through
            case 163:
                break;
            case 58: {
                return T_NULL;
            } 
            // fall through
            case 164:
                break;
            case 59: {
                return T_WITH;
            } 
            // fall through
            case 165:
                break;
            case 60: {
                return T_KEY;
            } 
            // fall through
            case 166:
                break;
            case 61: {
                return B_COMMENT;
            } 
            // fall through
            case 167:
                break;
            case 62: {
                return T_TRUE;
            } 
            // fall through
            case 168:
                break;
            case 63: {
                return T_LIKE;
            } 
            // fall through
            case 169:
                break;
            case 64: {
                return T_NONE;
            } 
            // fall through
            case 170:
                break;
            case 65: {
                return F_SHIFT;
            } 
            // fall through
            case 171:
                break;
            case 66: {
                return F_SLICE;
            } 
            // fall through
            case 172:
                break;
            case 67: {
                return F_COUNT;
            } 
            // fall through
            case 173:
                break;
            case 68: {
                return T_NIN;
            } 
            // fall through
            case 174:
                break;
            case 69: {
                return T_LIMIT;
            } 
            // fall through
            case 175:
                break;
            case 70: {
                return T_GRAPH;
            } 
            // fall through
            case 176:
                break;
            case 71: {
                return F_FIRST;
            } 
            // fall through
            case 177:
                break;
            case 72: {
                return F_MINUS;
            } 
            // fall through
            case 178:
                break;
            case 73: {
                return F_UNION;
            } 
            // fall through
            case 179:
                break;
            case 74: {
                return T_SYS_FROM;
            } 
            // fall through
            case 180:
                break;
            case 75: {
                return T_FALSE;
            } 
            // fall through
            case 181:
                break;
            case 76: {
                return T_SEARCH;
            } 
            // fall through
            case 182:
                break;
            case 77: {
                return F_SORTED;
            } 
            // fall through
            case 183:
                break;
            case 78: {
                return T_RETURN;
            } 
            // fall through
            case 184:
                break;
            case 79: {
                return T_REMOVE;
            } 
            // fall through
            case 185:
                break;
            case 80: {
                return T_PHRASE;
            } 
            // fall through
            case 186:
                break;
            case 81: {
                return T_FILTER;
            } 
            // fall through
            case 187:
                break;
            case 82: {
                return T_INSERT;
            } 
            // fall through
            case 188:
                break;
            case 83: {
                return T_INBOUND;
            } 
            // fall through
            case 189:
                break;
            case 84: {
                return T_UPSERT;
            } 
            // fall through
            case 190:
                break;
            case 85: {
                return T_UPDATE;
            } 
            // fall through
            case 191:
                break;
            case 86: {
                return F_UNIQUE;
            } 
            // fall through
            case 192:
                break;
            case 87: {
                return T_REPLACE;
            } 
            // fall through
            case 193:
                break;
            case 88: {
                return F_REVERSE;
            } 
            // fall through
            case 194:
                break;
            case 89: {
                return T_COLLECT;
            } 
            // fall through
            case 195:
                break;
            case 90: {
                return T_OUTBOUND;
            } 
            // fall through
            case 196:
                break;
            case 91: {
                return F_LENGTH;
            } 
            // fall through
            case 197:
                break;
            case 92: {
                return F_UNSHIFT;
            } 
            // fall through
            case 198:
                break;
            case 93: {
                return F_POSITION;
            } 
            // fall through
            case 199:
                break;
            case 94: {
                return T_DISTINCT;
            } 
            // fall through
            case 200:
                break;
            case 95: {
                return T_AGGREGATE;
            } 
            // fall through
            case 201:
                break;
            case 96: {
                return F_REMOVE_NTH;
            } 
            // fall through
            case 202:
                break;
            case 97: {
                return T_SHORTEST_PATH;
            } 
            // fall through
            case 203:
                break;
            case 98: {
                return F_COLLECTIONS;
            } 
            // fall through
            case 204:
                break;
            case 99: {
                return F_REMOVE_VALUE;
            } 
            // fall through
            case 205:
                break;
            case 100: {
                return F_COUNT_UNIQUE;
            } 
            // fall through
            case 206:
                break;
            case 101: {
                return F_INTERSECTION;
            } 
            // fall through
            case 207:
                break;
            case 102: {
                return F_SORTED_UNIQUE;
            } 
            // fall through
            case 208:
                break;
            case 103: {
                return F_REMOVE_VALUES;
            } 
            // fall through
            case 209:
                break;
            case 104: {
                return F_COUNT_DISTINCT;
            } 
            // fall through
            case 210:
                break;
            case 105: {
                return F_OUTERSECTION;
            } 
            // fall through
            case 211:
                break;
            case 106: {
                return F_UNION_DISTINCT;
            } 
            // fall through
            case 212: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
