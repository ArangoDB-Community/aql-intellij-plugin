/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.machak.aql.grammar.generated;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.*;
import static com.machak.aql.grammar.generated.psi.AqlTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_AqlLexer.flex</tt>
 */
public class _AqlLexer implements FlexLexer {

  /**
   * This character denotes the end of file
   */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14208 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 10] << 6) | ((ch >> 4) & 0x3f)] << 4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
          "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16" +
                  "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1" +
                  "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43" +
                  "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1" +
                  "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
          "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34" +
                  "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25" +
                  "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5" +
                  "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1" +
                  "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52" +
                  "\1\16\1\25\1\53\1\54\1\55\1\56\1\57\1\60\2\16\1\61\1\54\1\55\1\62\1\1\1\63" +
                  "\1\1\1\64\1\65\1\22\1\55\1\66\1\1\1\67\1\16\1\70\1\71\1\54\1\55\1\66\1\1\1" +
                  "\60\1\16\1\41\1\72\1\73\1\74\1\75\1\1\1\67\2\1\1\76\1\36\1\55\1\51\1\1\1\77" +
                  "\1\16\1\1\1\100\1\36\1\55\1\101\1\1\1\57\1\16\1\102\1\76\1\36\1\13\1\103\1" +
                  "\57\1\104\1\16\1\42\1\105\1\106\1\13\1\107\1\110\3\1\1\25\2\13\1\111\1\110" +
                  "\3\1\1\112\1\113\1\114\1\115\1\116\1\117\2\1\1\67\3\1\1\120\1\13\1\121\1\1" +
                  "\1\122\7\1\2\13\1\30\1\123\1\1\1\124\1\125\1\126\1\127\1\1\2\13\1\130\2\13" +
                  "\1\131\24\13\1\132\1\133\2\13\1\132\2\13\1\134\1\135\1\14\3\13\1\135\3\13" +
                  "\1\30\2\1\1\13\1\1\5\13\1\136\1\25\45\13\1\137\1\13\1\140\1\30\4\13\1\30\1" +
                  "\141\1\142\1\16\1\13\1\16\1\13\1\16\1\142\1\67\3\13\1\143\1\1\1\144\4\1\5" +
                  "\13\1\27\1\145\1\13\1\146\4\13\1\40\1\13\1\147\3\1\1\13\1\150\1\151\2\13\1" +
                  "\152\1\13\1\75\3\1\1\13\1\110\3\13\1\151\4\1\1\153\5\1\1\105\2\13\1\143\1" +
                  "\154\3\1\1\155\1\13\1\156\1\42\2\13\1\40\1\1\2\13\1\143\1\1\1\37\1\42\1\13" +
                  "\1\150\1\46\5\1\1\157\1\160\14\13\4\1\21\13\1\136\2\13\1\136\1\161\1\13\1" +
                  "\150\3\13\1\162\1\163\1\164\1\121\1\163\1\165\1\1\1\166\2\1\1\167\1\1\1\170" +
                  "\1\1\1\121\6\1\1\171\1\172\1\173\1\174\1\175\3\1\1\176\147\1\2\13\1\147\2" +
                  "\13\1\147\10\13\1\177\1\200\2\13\1\130\3\13\1\201\1\1\1\13\1\110\4\202\4\1" +
                  "\1\123\35\1\1\203\2\1\1\204\1\25\4\13\1\205\1\25\4\13\1\131\1\105\1\13\1\150" +
                  "\1\25\4\13\1\147\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2" +
                  "\1\10\13\1\121\4\1\2\13\1\150\20\13\1\121\1\13\1\206\1\1\2\13\1\147\1\123" +
                  "\1\13\1\150\4\13\1\40\2\1\1\207\1\210\5\13\1\211\1\13\1\147\1\27\3\1\1\207" +
                  "\1\212\1\13\1\31\1\1\3\13\1\143\1\210\2\13\1\143\3\1\1\213\1\42\1\13\1\40" +
                  "\1\13\1\110\1\1\1\13\1\121\1\50\2\13\1\31\1\123\1\1\1\214\1\215\2\13\1\46" +
                  "\1\1\1\216\1\1\1\13\1\217\3\13\1\220\1\221\1\222\1\30\1\64\1\223\1\224\1\202" +
                  "\2\13\1\131\1\40\7\13\1\31\1\1\72\13\1\143\1\13\1\225\2\13\1\152\20\1\26\13" +
                  "\1\150\6\13\1\75\2\1\1\110\1\226\1\55\1\227\1\230\6\13\1\16\1\1\1\155\25\13" +
                  "\1\150\1\1\4\13\1\210\2\13\1\27\2\1\1\152\7\1\1\214\7\13\1\121\2\1\1\25\1" +
                  "\30\1\25\1\30\1\231\4\13\1\147\1\232\1\233\2\1\1\234\1\13\1\14\1\235\2\150" +
                  "\2\1\7\13\1\30\30\1\1\13\1\121\3\13\1\67\2\1\2\13\1\1\1\13\1\236\2\13\1\40" +
                  "\1\13\1\150\2\13\1\237\3\1\11\13\1\150\1\1\2\13\1\237\1\13\1\152\2\13\1\27" +
                  "\3\13\1\143\11\1\23\13\1\110\1\13\1\40\1\27\11\1\1\240\2\13\1\241\1\13\1\40" +
                  "\1\13\1\110\1\13\1\147\4\1\1\13\1\242\1\13\1\40\1\13\1\75\4\1\3\13\1\243\4" +
                  "\1\1\67\1\244\1\13\1\143\2\1\1\13\1\121\1\13\1\121\2\1\1\120\1\13\1\151\1" +
                  "\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1\46\3\1\3\13\1\31\3\13" +
                  "\1\31\60\1\1\155\2\13\1\27\4\1\1\155\2\13\2\1\1\13\1\46\1\1\1\155\1\13\1\110" +
                  "\2\1\2\13\1\245\1\155\2\13\1\31\1\246\1\247\2\1\1\13\1\22\1\152\5\1\1\250" +
                  "\1\251\1\46\2\13\1\147\2\1\1\71\1\54\1\55\1\66\1\1\1\252\1\16\11\1\3\13\1" +
                  "\151\1\253\3\1\3\13\1\1\1\254\13\1\2\13\1\147\2\1\1\255\2\1\3\13\1\1\1\256" +
                  "\3\1\2\13\1\30\5\1\1\13\1\75\30\1\4\13\1\1\1\123\34\1\3\13\1\46\20\1\1\55" +
                  "\1\13\1\147\1\1\1\67\2\1\1\210\1\13\67\1\71\13\1\75\16\1\14\13\1\143\53\1" +
                  "\2\13\1\147\75\1\44\13\1\110\33\1\43\13\1\46\1\13\1\147\7\1\1\13\1\150\1\1" +
                  "\3\13\1\1\1\143\1\1\1\155\1\257\1\13\67\1\4\13\1\151\1\67\3\1\1\155\4\1\1" +
                  "\67\1\1\76\13\1\121\1\1\57\13\1\31\20\1\1\16\77\1\6\13\1\30\1\121\1\46\1\75" +
                  "\66\1\5\13\1\214\3\13\1\142\1\260\1\261\1\262\3\13\1\263\1\264\1\13\1\265" +
                  "\1\266\1\36\24\13\1\267\1\13\1\36\1\131\1\13\1\131\1\13\1\214\1\13\1\214\1" +
                  "\147\1\13\1\147\1\13\1\55\1\13\1\55\1\13\1\216\3\1\14\13\1\151\3\1\4\13\1" +
                  "\143\113\1\1\262\1\13\1\270\1\271\1\272\1\273\1\274\1\275\1\276\1\152\1\277" +
                  "\1\152\24\1\55\13\1\110\2\1\103\13\1\151\15\13\1\150\150\13\1\16\25\1\41\13" +
                  "\1\150\36\1");

  /* The ZZ_CMAP_A table has 3072 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
          "\11\0\1\3\1\2\3\1\22\0\1\3\1\52\1\77\2\0\1\61\1\0\1\76\1\66\1\67\1\31\1\57" +
                  "\1\65\1\60\1\64\1\30\12\27\1\63\1\0\1\53\1\51\1\54\1\62\1\0\1\6\1\34\1\10" +
                  "\1\21\1\5\1\17\1\16\1\11\1\20\2\34\1\15\1\23\1\22\1\13\1\12\1\34\1\7\1\4\1" +
                  "\14\1\24\1\26\1\25\3\34\1\72\1\0\1\73\1\0\1\33\1\0\1\44\1\74\1\10\1\47\1\42" +
                  "\1\43\1\16\1\11\1\55\1\34\1\56\1\37\1\23\1\35\1\46\1\12\1\34\1\41\1\45\1\40" +
                  "\1\36\1\26\1\25\1\34\1\75\1\34\1\70\1\0\1\71\1\50\6\0\1\1\12\0\1\3\11\0\1" +
                  "\32\12\0\1\32\4\0\1\32\5\0\27\32\1\0\12\32\4\0\14\32\16\0\5\32\7\0\1\32\1" +
                  "\0\1\32\1\0\5\32\1\0\2\32\2\0\4\32\1\0\1\32\6\0\1\32\1\0\3\32\1\0\1\32\1\0" +
                  "\4\32\1\0\23\32\1\0\13\32\10\0\6\32\1\0\26\32\2\0\1\32\6\0\10\32\10\0\13\32" +
                  "\5\0\3\32\33\0\6\32\1\0\1\32\17\0\2\32\7\0\2\32\12\0\3\32\2\0\2\32\1\0\16" +
                  "\32\15\0\11\32\13\0\1\32\30\0\6\32\4\0\2\32\4\0\1\32\5\0\6\32\4\0\1\32\11" +
                  "\0\1\32\3\0\1\32\7\0\11\32\7\0\5\32\1\0\10\32\6\0\26\32\3\0\1\32\2\0\1\32" +
                  "\7\0\11\32\4\0\10\32\2\0\2\32\2\0\26\32\1\0\7\32\1\0\1\32\3\0\4\32\3\0\1\32" +
                  "\20\0\1\32\15\0\2\32\1\0\1\32\5\0\6\32\4\0\2\32\1\0\2\32\1\0\2\32\1\0\2\32" +
                  "\17\0\4\32\1\0\1\32\3\0\3\32\20\0\11\32\1\0\2\32\1\0\2\32\1\0\5\32\3\0\1\32" +
                  "\2\0\1\32\30\0\1\32\13\0\10\32\2\0\1\32\3\0\1\32\1\0\6\32\3\0\3\32\1\0\4\32" +
                  "\3\0\2\32\1\0\1\32\1\0\2\32\3\0\2\32\3\0\3\32\3\0\14\32\13\0\10\32\1\0\2\32" +
                  "\10\0\3\32\5\0\1\32\4\0\10\32\1\0\6\32\1\0\5\32\3\0\1\32\3\0\2\32\15\0\13" +
                  "\32\2\0\1\32\6\0\3\32\10\0\1\32\5\0\22\32\3\0\10\32\1\0\11\32\1\0\1\32\2\0" +
                  "\7\32\11\0\1\32\1\0\2\32\15\0\2\32\1\0\1\32\2\0\2\32\1\0\1\32\2\0\1\32\6\0" +
                  "\4\32\1\0\7\32\1\0\3\32\1\0\1\32\1\0\1\32\2\0\2\32\1\0\4\32\1\0\2\32\11\0" +
                  "\1\32\2\0\5\32\1\0\1\32\25\0\14\32\1\0\24\32\13\0\5\32\22\0\7\32\4\0\4\32" +
                  "\3\0\1\32\3\0\2\32\7\0\3\32\4\0\15\32\14\0\1\32\1\0\6\32\1\0\1\32\5\0\1\32" +
                  "\2\0\13\32\1\0\15\32\1\0\4\32\2\0\7\32\1\0\1\32\1\0\4\32\2\0\1\32\1\0\4\32" +
                  "\2\0\7\32\1\0\1\32\1\0\4\32\2\0\16\32\2\0\6\32\2\0\15\32\2\0\1\32\1\3\17\32" +
                  "\1\0\10\32\7\0\15\32\1\0\6\32\23\0\1\32\4\0\1\32\3\0\5\32\2\0\22\32\1\0\1" +
                  "\32\5\0\17\32\1\0\16\32\2\0\5\32\13\0\14\32\13\0\1\32\15\0\7\32\7\0\16\32" +
                  "\15\0\2\32\11\0\4\32\1\0\4\32\3\0\2\32\11\0\10\32\1\0\1\32\1\0\1\32\1\0\1" +
                  "\32\1\0\6\32\1\0\7\32\1\0\1\32\3\0\3\32\1\0\7\32\3\0\4\32\2\0\6\32\4\0\13" +
                  "\3\15\0\2\1\5\0\1\3\17\0\1\3\1\0\1\32\15\0\1\32\2\0\1\32\4\0\1\32\2\0\12\32" +
                  "\1\0\1\32\3\0\5\32\6\0\1\32\1\0\1\32\1\0\1\32\1\0\4\32\1\0\13\32\2\0\4\32" +
                  "\5\0\5\32\4\0\1\32\4\0\2\32\13\0\5\32\6\0\4\32\3\0\2\32\14\0\10\32\7\0\10" +
                  "\32\1\0\7\32\1\0\1\3\4\0\2\32\12\0\5\32\5\0\2\32\3\0\7\32\6\0\3\32\12\0\2" +
                  "\32\13\0\11\32\2\0\27\32\2\0\7\32\1\0\3\32\1\0\4\32\1\0\4\32\2\0\6\32\3\0" +
                  "\1\32\1\0\1\32\2\0\5\32\1\0\12\32\12\0\5\32\1\0\3\32\1\0\10\32\4\0\7\32\3" +
                  "\0\1\32\3\0\2\32\1\0\1\32\3\0\2\32\2\0\5\32\2\0\1\32\1\0\1\32\30\0\3\32\3" +
                  "\0\6\32\2\0\6\32\2\0\6\32\11\0\7\32\4\0\5\32\3\0\5\32\5\0\1\32\1\0\10\32\1" +
                  "\0\5\32\1\0\1\32\1\0\2\32\1\0\2\32\1\0\12\32\6\0\12\32\2\0\6\32\2\0\6\32\2" +
                  "\0\6\32\2\0\3\32\3\0\14\32\1\0\16\32\1\0\2\32\1\0\2\32\1\0\10\32\6\0\4\32" +
                  "\4\0\16\32\2\0\1\32\1\0\14\32\1\0\2\32\3\0\1\32\2\0\4\32\1\0\2\32\12\0\10" +
                  "\32\6\0\6\32\1\0\3\32\1\0\12\32\3\0\1\32\12\0\4\32\25\0\1\32\1\0\1\32\3\0" +
                  "\7\32\1\0\1\32\1\0\4\32\1\0\17\32\1\0\2\32\14\0\3\32\7\0\4\32\11\0\2\32\1" +
                  "\0\1\32\20\0\4\32\10\0\1\32\13\0\10\32\5\0\3\32\2\0\1\32\2\0\2\32\2\0\4\32" +
                  "\1\0\14\32\1\0\1\32\1\0\7\32\1\0\21\32\1\0\4\32\2\0\10\32\1\0\7\32\1\0\14" +
                  "\32\1\0\4\32\1\0\5\32\1\0\1\32\3\0\14\32\2\0\10\32\1\0\2\32\1\0\1\32\2\0\1" +
                  "\32\1\0\12\32\1\0\4\32\1\0\1\32\1\0\1\32\6\0\1\32\4\0\1\32\1\0\1\32\1\0\1" +
                  "\32\1\0\3\32\1\0\2\32\1\0\1\32\2\0\1\32\1\0\1\32\1\0\1\32\1\0\1\32\1\0\1\32" +
                  "\1\0\2\32\1\0\1\32\2\0\4\32\1\0\7\32\1\0\4\32\1\0\4\32\1\0\1\32\1\0\12\32" +
                  "\1\0\5\32\1\0\3\32\1\0\5\32\1\0\5\32");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int[] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\1\0\1\1\1\2\16\3\1\4\1\5\1\6\6\3" +
                  "\3\1\1\7\1\10\1\3\1\11\1\12\1\13\1\14" +
                  "\1\15\1\1\1\16\1\17\1\20\1\21\1\22\1\23" +
                  "\1\24\1\25\1\26\16\3\1\27\4\3\1\30\1\0" +
                  "\10\3\1\31\1\32\1\33\1\34\1\35\1\36\1\37" +
                  "\1\27\1\40\1\41\3\3\1\42\7\3\1\43\2\3" +
                  "\1\44\10\3\1\0\2\3\1\45\3\3\1\46\1\47" +
                  "\1\50\4\3\1\51\13\3\1\52\1\53\3\3\1\54" +
                  "\1\55\1\56\1\57\1\60\1\61\13\3\1\62\1\63" +
                  "\1\64\5\3\1\65\2\3\1\66\3\3\1\67\1\70" +
                  "\1\3\1\71\1\72\1\73\1\3\1\74\1\75\4\3" +
                  "\1\76\1\77\2\3\1\100\2\3\1\101\1\102\1\3" +
                  "\1\103\1\3\1\104";

  private static int[] zzUnpackAction() {
    int[] result = new int[198];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do {
        result[j++] = value;
      } while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0" +
                  "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0" +
                  "\0\u0400\0\u0440\0\u0480\0\100\0\u04c0\0\u0500\0\u0540\0\u0580" +
                  "\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780" +
                  "\0\100\0\100\0\100\0\100\0\u07c0\0\u0800\0\100\0\100" +
                  "\0\100\0\100\0\100\0\100\0\100\0\100\0\100\0\u0840" +
                  "\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0a40" +
                  "\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40" +
                  "\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40" +
                  "\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0100\0\100\0\100\0\100" +
                  "\0\100\0\100\0\100\0\u0f80\0\100\0\100\0\u0fc0\0\u1000" +
                  "\0\u1040\0\u0100\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0" +
                  "\0\u1200\0\u0100\0\u1240\0\u1280\0\u0100\0\u12c0\0\u1300\0\u1340" +
                  "\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540" +
                  "\0\u0100\0\u1580\0\u15c0\0\u1600\0\u0100\0\u0100\0\u0100\0\u1640" +
                  "\0\u1680\0\u16c0\0\u1700\0\u0100\0\u1740\0\u1780\0\u17c0\0\u1800" +
                  "\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0\0\u0100" +
                  "\0\u0100\0\u1a00\0\u1a40\0\u1a80\0\u0100\0\u0d40\0\u0100\0\u0100" +
                  "\0\u0100\0\u0100\0\u1ac0\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\u1c00" +
                  "\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u0100\0\u0100\0\u0100" +
                  "\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u0100\0\u1ec0\0\u1f00" +
                  "\0\u0100\0\u1f40\0\u1f80\0\u1fc0\0\u0100\0\u0100\0\u2000\0\u0100" +
                  "\0\u0100\0\u0100\0\u2040\0\u0100\0\u0100\0\u2080\0\u20c0\0\u2100" +
                  "\0\u2140\0\u0100\0\u0100\0\u2180\0\u21c0\0\u0100\0\u2200\0\u2240" +
                  "\0\u0100\0\u0100\0\u2280\0\u0100\0\u22c0\0\u0100";

  private static int[] zzUnpackRowMap() {
    int[] result = new int[198];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int[] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int[] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\5" +
                  "\1\11\1\5\1\12\1\13\1\14\1\15\1\16\1\17" +
                  "\2\5\1\20\1\21\1\5\1\22\1\23\1\24\1\5" +
                  "\1\2\1\5\1\25\1\20\1\26\1\27\1\7\1\5" +
                  "\1\30\1\31\1\4\1\32\1\17\1\33\1\34\1\35" +
                  "\1\36\1\37\1\40\1\5\1\41\1\42\1\43\1\44" +
                  "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54" +
                  "\1\55\2\5\1\56\1\57\101\0\3\3\100\0\1\5" +
                  "\1\60\3\5\1\61\1\5\1\62\14\5\3\0\7\5" +
                  "\1\60\3\5\1\62\1\5\5\0\2\5\15\0\2\5" +
                  "\6\0\24\5\3\0\15\5\5\0\2\5\15\0\2\5" +
                  "\6\0\1\63\11\5\1\64\11\5\3\0\12\5\1\63" +
                  "\2\5\5\0\2\5\15\0\2\5\6\0\1\5\1\65" +
                  "\22\5\3\0\7\5\1\65\5\5\5\0\2\5\15\0" +
                  "\2\5\6\0\7\5\1\66\14\5\3\0\13\5\1\66" +
                  "\1\5\5\0\2\5\15\0\2\5\6\0\5\5\1\67" +
                  "\16\5\3\0\15\5\5\0\2\5\15\0\2\5\6\0" +
                  "\24\5\3\0\1\70\14\5\5\0\2\5\15\0\2\5" +
                  "\6\0\1\5\1\71\12\5\1\72\7\5\3\0\7\5" +
                  "\1\71\5\5\5\0\1\72\1\5\15\0\2\5\6\0" +
                  "\3\5\1\73\20\5\3\0\6\5\1\73\6\5\5\0" +
                  "\2\5\15\0\2\5\6\0\7\5\1\74\4\5\1\75" +
                  "\7\5\3\0\13\5\1\74\1\5\5\0\1\75\1\5" +
                  "\15\0\2\5\6\0\16\5\1\76\5\5\3\0\2\5" +
                  "\1\76\12\5\5\0\2\5\15\0\2\5\6\0\1\5" +
                  "\1\77\12\5\1\100\7\5\3\0\7\5\1\77\5\5" +
                  "\5\0\1\100\1\5\15\0\2\5\6\0\6\5\1\101" +
                  "\15\5\3\0\15\5\5\0\2\5\15\0\2\5\6\0" +
                  "\14\5\1\102\7\5\3\0\15\5\5\0\1\102\1\5" +
                  "\15\0\2\5\31\0\1\22\100\0\1\103\1\104\52\0" +
                  "\24\5\3\0\3\5\1\105\7\5\1\106\1\5\5\0" +
                  "\2\5\15\0\2\5\6\0\1\5\1\71\12\5\1\72" +
                  "\7\5\3\0\7\5\1\71\5\5\5\0\1\107\1\5" +
                  "\15\0\2\5\6\0\24\5\3\0\6\5\1\110\6\5" +
                  "\5\0\2\5\15\0\2\5\6\0\7\5\1\74\4\5" +
                  "\1\75\7\5\3\0\11\5\1\111\1\5\1\74\1\5" +
                  "\5\0\1\75\1\5\15\0\2\5\6\0\1\63\11\5" +
                  "\1\64\11\5\3\0\2\5\1\112\1\5\1\113\5\5" +
                  "\1\63\2\5\5\0\2\5\15\0\2\5\6\0\24\5" +
                  "\3\0\3\5\1\114\2\5\1\115\6\5\5\0\2\5" +
                  "\15\0\2\5\53\0\1\116\1\117\76\0\1\120\77\0" +
                  "\1\121\77\0\1\122\77\0\1\123\32\0\16\5\1\76" +
                  "\5\5\3\0\2\5\1\124\12\5\5\0\2\5\15\0" +
                  "\2\5\65\0\1\125\100\0\1\126\17\0\2\5\1\127" +
                  "\21\5\3\0\11\5\1\127\3\5\5\0\2\5\15\0" +
                  "\2\5\6\0\7\5\1\130\14\5\3\0\13\5\1\130" +
                  "\1\5\5\0\2\5\15\0\2\5\6\0\3\5\1\131" +
                  "\20\5\3\0\6\5\1\131\6\5\5\0\2\5\15\0" +
                  "\2\5\6\0\4\5\1\132\17\5\3\0\15\5\5\0" +
                  "\2\5\15\0\2\5\6\0\12\5\1\133\11\5\3\0" +
                  "\15\5\5\0\2\5\15\0\2\5\6\0\6\5\1\134" +
                  "\1\5\1\135\6\5\1\136\4\5\3\0\5\5\1\135" +
                  "\7\5\5\0\2\5\15\0\2\5\6\0\11\5\1\137" +
                  "\12\5\3\0\4\5\1\137\10\5\5\0\2\5\15\0" +
                  "\2\5\6\0\3\5\1\140\20\5\3\0\6\5\1\140" +
                  "\6\5\5\0\2\5\15\0\2\5\6\0\16\5\1\141" +
                  "\5\5\3\0\15\5\5\0\2\5\15\0\2\5\6\0" +
                  "\10\5\1\142\13\5\3\0\5\5\1\142\7\5\5\0" +
                  "\2\5\15\0\2\5\6\0\17\5\1\143\4\5\3\0" +
                  "\15\5\5\0\2\5\15\0\2\5\6\0\2\5\1\144" +
                  "\21\5\3\0\11\5\1\144\3\5\5\0\2\5\15\0" +
                  "\2\5\6\0\3\5\1\145\20\5\3\0\6\5\1\145" +
                  "\6\5\5\0\2\5\15\0\2\5\6\0\11\5\1\146" +
                  "\12\5\3\0\4\5\1\146\10\5\5\0\2\5\15\0" +
                  "\2\5\6\0\1\147\7\5\1\150\13\5\3\0\5\5" +
                  "\1\150\4\5\1\147\2\5\5\0\2\5\15\0\2\5" +
                  "\6\0\1\151\23\5\3\0\12\5\1\151\2\5\5\0" +
                  "\2\5\15\0\2\5\6\0\1\152\23\5\3\0\12\5" +
                  "\1\152\2\5\5\0\2\5\15\0\2\5\6\0\1\153" +
                  "\14\5\1\154\6\5\3\0\12\5\1\153\1\5\1\154" +
                  "\5\0\2\5\15\0\2\5\6\0\10\5\1\155\13\5" +
                  "\3\0\5\5\1\155\7\5\5\0\2\5\15\0\2\5" +
                  "\2\0\1\103\2\0\75\103\1\104\1\0\27\104\1\156" +
                  "\46\104\4\0\24\5\3\0\4\5\1\157\10\5\5\0" +
                  "\2\5\15\0\2\5\6\0\24\5\3\0\2\5\1\160" +
                  "\2\5\1\161\7\5\5\0\2\5\15\0\2\5\6\0" +
                  "\17\5\1\143\4\5\3\0\15\5\5\0\1\5\1\162" +
                  "\15\0\2\5\6\0\24\5\3\0\3\5\1\163\11\5" +
                  "\5\0\2\5\15\0\2\5\6\0\24\5\3\0\4\5" +
                  "\1\164\10\5\5\0\2\5\15\0\2\5\6\0\24\5" +
                  "\3\0\14\5\1\165\5\0\2\5\15\0\1\5\1\166" +
                  "\6\0\24\5\3\0\4\5\1\167\10\5\5\0\2\5" +
                  "\15\0\2\5\6\0\24\5\3\0\5\5\1\170\7\5" +
                  "\5\0\2\5\15\0\2\5\6\0\1\147\7\5\1\150" +
                  "\13\5\3\0\5\5\1\150\4\5\1\147\2\5\5\0" +
                  "\2\5\15\0\1\171\1\5\6\0\3\5\1\172\20\5" +
                  "\3\0\6\5\1\172\6\5\5\0\2\5\15\0\2\5" +
                  "\6\0\3\5\1\173\20\5\3\0\6\5\1\173\6\5" +
                  "\5\0\2\5\15\0\2\5\6\0\10\5\1\174\13\5" +
                  "\3\0\5\5\1\174\7\5\5\0\2\5\15\0\2\5" +
                  "\6\0\3\5\1\175\20\5\3\0\6\5\1\175\6\5" +
                  "\5\0\2\5\15\0\2\5\6\0\11\5\1\176\12\5" +
                  "\3\0\4\5\1\176\10\5\5\0\2\5\15\0\2\5" +
                  "\6\0\20\5\1\177\3\5\3\0\3\5\1\177\11\5" +
                  "\5\0\2\5\15\0\2\5\6\0\7\5\1\200\14\5" +
                  "\3\0\13\5\1\200\1\5\5\0\2\5\15\0\2\5" +
                  "\6\0\11\5\1\201\12\5\3\0\4\5\1\201\10\5" +
                  "\5\0\2\5\15\0\2\5\6\0\2\5\1\202\21\5" +
                  "\3\0\11\5\1\202\3\5\5\0\2\5\15\0\2\5" +
                  "\6\0\14\5\1\203\7\5\3\0\15\5\5\0\2\5" +
                  "\15\0\2\5\6\0\14\5\1\204\7\5\3\0\15\5" +
                  "\5\0\1\204\1\5\15\0\2\5\6\0\6\5\1\205" +
                  "\15\5\3\0\15\5\5\0\2\5\15\0\2\5\6\0" +
                  "\10\5\1\206\13\5\3\0\5\5\1\206\7\5\5\0" +
                  "\2\5\15\0\2\5\6\0\1\5\1\207\22\5\3\0" +
                  "\7\5\1\207\5\5\5\0\2\5\15\0\2\5\6\0" +
                  "\7\5\1\210\14\5\3\0\13\5\1\210\1\5\5\0" +
                  "\2\5\15\0\2\5\6\0\4\5\1\211\17\5\3\0" +
                  "\15\5\5\0\2\5\15\0\2\5\6\0\10\5\1\212" +
                  "\13\5\3\0\5\5\1\212\7\5\5\0\2\5\15\0" +
                  "\2\5\6\0\1\5\1\213\22\5\3\0\7\5\1\213" +
                  "\5\5\5\0\2\5\15\0\2\5\6\0\2\5\1\214" +
                  "\21\5\3\0\11\5\1\214\3\5\5\0\2\5\15\0" +
                  "\2\5\6\0\5\5\1\215\16\5\3\0\15\5\5\0" +
                  "\2\5\15\0\2\5\2\0\1\104\1\0\26\104\1\216" +
                  "\1\156\46\104\4\0\24\5\3\0\4\5\1\217\10\5" +
                  "\5\0\2\5\15\0\2\5\6\0\24\5\3\0\7\5" +
                  "\1\220\5\5\5\0\2\5\15\0\2\5\6\0\24\5" +
                  "\3\0\7\5\1\221\5\5\5\0\2\5\15\0\2\5" +
                  "\6\0\24\5\3\0\7\5\1\222\5\5\5\0\2\5" +
                  "\15\0\2\5\6\0\24\5\3\0\12\5\1\223\2\5" +
                  "\5\0\2\5\15\0\2\5\6\0\24\5\3\0\15\5" +
                  "\5\0\2\5\15\0\1\224\1\5\6\0\24\5\3\0" +
                  "\13\5\1\225\1\5\5\0\2\5\15\0\2\5\6\0" +
                  "\4\5\1\226\17\5\3\0\15\5\5\0\2\5\15\0" +
                  "\2\5\6\0\10\5\1\227\13\5\3\0\5\5\1\227" +
                  "\7\5\5\0\2\5\15\0\2\5\6\0\1\5\1\230" +
                  "\22\5\3\0\7\5\1\230\5\5\5\0\2\5\15\0" +
                  "\2\5\6\0\2\5\1\231\21\5\3\0\11\5\1\231" +
                  "\3\5\5\0\2\5\15\0\2\5\6\0\3\5\1\232" +
                  "\20\5\3\0\6\5\1\232\6\5\5\0\2\5\15\0" +
                  "\2\5\6\0\22\5\1\233\1\5\3\0\15\5\5\0" +
                  "\2\5\15\0\2\5\6\0\1\5\1\234\22\5\3\0" +
                  "\7\5\1\234\5\5\5\0\2\5\15\0\2\5\6\0" +
                  "\1\235\23\5\3\0\12\5\1\235\2\5\5\0\2\5" +
                  "\15\0\2\5\6\0\16\5\1\236\5\5\3\0\15\5" +
                  "\5\0\2\5\15\0\2\5\6\0\10\5\1\237\13\5" +
                  "\3\0\5\5\1\237\7\5\5\0\2\5\15\0\2\5" +
                  "\6\0\5\5\1\240\16\5\3\0\15\5\5\0\2\5" +
                  "\15\0\2\5\6\0\1\5\1\241\22\5\3\0\7\5" +
                  "\1\241\5\5\5\0\2\5\15\0\2\5\6\0\3\5" +
                  "\1\242\20\5\3\0\6\5\1\242\6\5\5\0\2\5" +
                  "\15\0\2\5\6\0\14\5\1\243\7\5\3\0\15\5" +
                  "\5\0\1\243\1\5\15\0\2\5\6\0\3\5\1\244" +
                  "\20\5\3\0\6\5\1\244\6\5\5\0\2\5\15\0" +
                  "\2\5\6\0\10\5\1\245\13\5\3\0\5\5\1\245" +
                  "\7\5\5\0\2\5\15\0\2\5\6\0\24\5\3\0" +
                  "\7\5\1\246\5\5\5\0\2\5\15\0\2\5\6\0" +
                  "\24\5\3\0\13\5\1\247\1\5\5\0\2\5\15\0" +
                  "\2\5\6\0\24\5\3\0\3\5\1\250\11\5\5\0" +
                  "\2\5\15\0\2\5\6\0\5\5\1\251\16\5\3\0" +
                  "\15\5\5\0\2\5\15\0\2\5\6\0\1\5\1\252" +
                  "\22\5\3\0\7\5\1\252\5\5\5\0\2\5\15\0" +
                  "\2\5\6\0\12\5\1\253\11\5\3\0\15\5\5\0" +
                  "\2\5\15\0\2\5\6\0\4\5\1\254\17\5\3\0" +
                  "\15\5\5\0\2\5\15\0\2\5\6\0\16\5\1\255" +
                  "\5\5\3\0\2\5\1\255\12\5\5\0\2\5\15\0" +
                  "\2\5\6\0\1\5\1\256\22\5\3\0\7\5\1\256" +
                  "\5\5\5\0\2\5\15\0\2\5\6\0\4\5\1\257" +
                  "\17\5\3\0\15\5\5\0\2\5\15\0\2\5\6\0" +
                  "\1\5\1\260\22\5\3\0\7\5\1\260\5\5\5\0" +
                  "\2\5\15\0\2\5\6\0\3\5\1\261\20\5\3\0" +
                  "\6\5\1\261\6\5\5\0\2\5\15\0\2\5\6\0" +
                  "\10\5\1\262\13\5\3\0\5\5\1\262\7\5\5\0" +
                  "\2\5\15\0\2\5\6\0\16\5\1\263\5\5\3\0" +
                  "\2\5\1\263\12\5\5\0\2\5\15\0\2\5\6\0" +
                  "\10\5\1\264\13\5\3\0\5\5\1\264\7\5\5\0" +
                  "\2\5\15\0\2\5\6\0\1\5\1\265\22\5\3\0" +
                  "\7\5\1\265\5\5\5\0\2\5\15\0\2\5\6\0" +
                  "\24\5\3\0\3\5\1\266\11\5\5\0\2\5\15\0" +
                  "\2\5\6\0\24\5\3\0\2\5\1\267\12\5\5\0" +
                  "\2\5\15\0\2\5\6\0\1\270\23\5\3\0\12\5" +
                  "\1\270\2\5\5\0\2\5\15\0\2\5\6\0\2\5" +
                  "\1\271\21\5\3\0\11\5\1\271\3\5\5\0\2\5" +
                  "\15\0\2\5\6\0\1\5\1\272\22\5\3\0\7\5" +
                  "\1\272\5\5\5\0\2\5\15\0\2\5\6\0\10\5" +
                  "\1\273\13\5\3\0\5\5\1\273\7\5\5\0\2\5" +
                  "\15\0\2\5\6\0\4\5\1\274\17\5\3\0\15\5" +
                  "\5\0\2\5\15\0\2\5\6\0\24\5\3\0\2\5" +
                  "\1\275\12\5\5\0\2\5\15\0\2\5\6\0\24\5" +
                  "\3\0\14\5\1\276\5\0\2\5\15\0\2\5\6\0" +
                  "\6\5\1\277\15\5\3\0\15\5\5\0\2\5\15\0" +
                  "\2\5\6\0\10\5\1\300\13\5\3\0\5\5\1\300" +
                  "\7\5\5\0\2\5\15\0\2\5\6\0\10\5\1\301" +
                  "\13\5\3\0\5\5\1\301\7\5\5\0\2\5\15\0" +
                  "\2\5\6\0\24\5\3\0\14\5\1\302\5\0\2\5" +
                  "\15\0\2\5\6\0\2\5\1\303\21\5\3\0\11\5" +
                  "\1\303\3\5\5\0\2\5\15\0\2\5\6\0\1\5" +
                  "\1\304\22\5\3\0\7\5\1\304\5\5\5\0\2\5" +
                  "\15\0\2\5\6\0\10\5\1\305\13\5\3\0\5\5" +
                  "\1\305\7\5\5\0\2\5\15\0\2\5\6\0\5\5" +
                  "\1\306\16\5\3\0\15\5\5\0\2\5\15\0\2\5" +
                  "\2\0";

  private static int[] zzUnpackTrans() {
    int[] result = new int[8960];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do {
        result[j++] = value;
      } while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
          "Unknown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\1\0\1\11\21\1\1\11\14\1\4\11\2\1\11\11" +
                  "\24\1\1\0\11\1\6\11\1\1\2\11\27\1\1\0" +
                  "\130\1";

  private static int[] zzUnpackAttribute() {
    int[] result = new int[198];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int[] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do {
        result[j++] = value;
      } while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
   the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
   from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _AqlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _AqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return the unpacked character translation table
   */
  private static char[] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do {
        map[j++] = value;
      } while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos -zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number) {
    if (number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return the next token
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int[] zzTransL = ZZ_TRANS;
    int[] zzRowMapL = ZZ_ROWMAP;
    int[] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ((zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          } else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            zzCurrentPos = zzCurrentPosL;
            zzMarkedPos = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = zzCurrentPos;
            zzMarkedPosL = zzMarkedPos;
            zzBufferL = zzBuffer;
            zzEndReadL = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
          if (zzNext == -1) {
            break zzForAction;
          }
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ((zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8) {
              break zzForAction;
            }
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      } else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: {
            return BAD_CHARACTER;
          }
            // fall through
          case 69:
            break;
          case 2: {
            return WHITE_SPACE;
          }
          // fall through
          case 70:
            break;
          case 3: {
            return ID;
          }
            // fall through
          case 71:
            break;
          case 4: {
            return NUMBER_INTEGER;
          }
            // fall through
          case 72:
            break;
          case 5: {
            return T_DIV;
          }
            // fall through
          case 73:
            break;
          case 6: {
            return T_TIMES;
          }
            // fall through
          case 74:
            break;
          case 7: {
            return T_LT;
          }
            // fall through
          case 75:
            break;
          case 8: {
            return T_GT;
          }
            // fall through
          case 76:
            break;
          case 9: {
            return T_PLUS;
          }
            // fall through
          case 77:
            break;
          case 10: {
            return T_MINUS;
          }
            // fall through
          case 78:
            break;
          case 11: {
            return T_MOD;
          }
            // fall through
          case 79:
            break;
          case 12: {
            return T_QUESTION;
          }
            // fall through
          case 80:
            break;
          case 13: {
            return T_COLON;
          }
            // fall through
          case 81:
            break;
          case 14: {
            return T_COMMA;
          }
            // fall through
          case 82:
            break;
          case 15: {
            return T_OPEN;
          }
            // fall through
          case 83:
            break;
          case 16: {
            return T_CLOSE;
          }
            // fall through
          case 84:
            break;
          case 17: {
            return T_OBJECT_OPEN;
          }
            // fall through
          case 85:
            break;
          case 18: {
            return T_OBJECT_CLOSE;
          }
            // fall through
          case 86:
            break;
          case 19: {
            return T_ARRAY_OPEN;
          }
            // fall through
          case 87:
            break;
          case 20: {
            return T_ARRAY_CLOSE;
          }
            // fall through
          case 88:
            break;
          case 21: {
            return SINGLE_QUOTE;
          }
            // fall through
          case 89:
            break;
          case 22: {
            return DOUBLE_QUOTE;
          }
            // fall through
          case 90:
            break;
          case 23: {
            return T_IN;
          }
            // fall through
          case 91:
            break;
          case 24: {
            return L_COMMENT;
          }
            // fall through
          case 92:
            break;
          case 25: {
            return T_OR;
          }
            // fall through
          case 93:
            break;
          case 26: {
            return T_REGEX_MATCH;
          }
            // fall through
          case 94:
            break;
          case 27: {
            return T_REGEX_NON_MATCH;
          }
            // fall through
          case 95:
            break;
          case 28: {
            return T_EQ;
          }
            // fall through
          case 96:
            break;
          case 29: {
            return T_NE;
          }
            // fall through
          case 97:
            break;
          case 30: {
            return T_LE;
          }
            // fall through
          case 98:
            break;
          case 31: {
            return T_GE;
          }
            // fall through
          case 99:
            break;
          case 32: {
            return T_SCOPE;
          }
            // fall through
          case 100:
            break;
          case 33: {
            return T_RANGE;
          }
            // fall through
          case 101:
            break;
          case 34: {
            return T_ASC;
          }
            // fall through
          case 102:
            break;
          case 35: {
            return T_LET;
          }
            // fall through
          case 103:
            break;
          case 36: {
            return T_FOR;
          }
            // fall through
          case 104:
            break;
          case 37: {
            return T_NOT;
          }
            // fall through
          case 105:
            break;
          case 38: {
            return T_AND;
          }
            // fall through
          case 106:
            break;
          case 39: {
            return T_ANY;
          }
            // fall through
          case 107:
            break;
          case 40: {
            return T_ALL;
          }
            // fall through
          case 108:
            break;
          case 41: {
            return T_SORT;
          }
            // fall through
          case 109:
            break;
          case 42: {
            return T_INTO;
          }
            // fall through
          case 110:
            break;
          case 43: {
            return T_DESC;
          }
            // fall through
          case 111:
            break;
          case 44: {
            return T_WITH;
          }
            // fall through
          case 112:
            break;
          case 45: {
            return B_COMMENT;
          }
            // fall through
          case 113:
            break;
          case 46: {
            return T_NULL;
          }
            // fall through
          case 114:
            break;
          case 47: {
            return T_NONE;
          }
            // fall through
          case 115:
            break;
          case 48: {
            return T_LIKE;
          }
            // fall through
          case 116:
            break;
          case 49: {
            return T_TRUE;
          }
            // fall through
          case 117:
            break;
          case 50: {
            return T_NIN;
          }
            // fall through
          case 118:
            break;
          case 51: {
            return T_LIMIT;
          }
            // fall through
          case 119:
            break;
          case 52: {
            return T_GRAPH;
          }
            // fall through
          case 120:
            break;
          case 53: {
            return T_FALSE;
          }
            // fall through
          case 121:
            break;
          case 54: {
            return T_SEARCH;
          }
            // fall through
          case 122:
            break;
          case 55: {
            return T_RETURN;
          }
            // fall through
          case 123:
            break;
          case 56: {
            return T_REMOVE;
          }
            // fall through
          case 124:
            break;
          case 57: {
            return T_PHRASE;
          }
            // fall through
          case 125:
            break;
          case 58: {
            return T_FILTER;
          }
            // fall through
          case 126:
            break;
          case 59: {
            return T_INSERT;
          }
            // fall through
          case 127:
            break;
          case 60: {
            return T_UPSERT;
          }
            // fall through
          case 128:
            break;
          case 61: {
            return T_UPDATE;
          }
            // fall through
          case 129:
            break;
          case 62: {
            return T_REPLACE;
          }
            // fall through
          case 130:
            break;
          case 63: {
            return T_COLLECT;
          }
            // fall through
          case 131:
            break;
          case 64: {
            return T_INBOUND;
          }
            // fall through
          case 132:
            break;
          case 65: {
            return T_DISTINCT;
          }
            // fall through
          case 133:
            break;
          case 66: {
            return T_OUTBOUND;
          }
            // fall through
          case 134:
            break;
          case 67: {
            return T_AGGREGATE;
          }
            // fall through
          case 135:
            break;
          case 68: {
            return T_SHORTEST_PATH;
          }
          // fall through
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
