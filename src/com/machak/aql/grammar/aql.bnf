{
    psiClassPrefix="Aql"
    psiImplClassSuffix="Impl"
    parserUtilClass="com.machak.aql.grammar.generated.AqlParserUtil"
    parserClass="com.machak.aql.grammar.generated.AqlParser"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
    elementTypeHolderClass="com.machak.aql.grammar.generated.psi.AqlTypes"
    elementTypeClass="com.machak.aql.grammar.AqlElementType"
    tokenTypeClass="com.machak.aql.grammar.AqlTokenType"
    psiImplUtilClass="com.machak.aql.grammar.generated.psi.AqlPsiUtil"
    psiPackage="com.machak.aql.grammar.generated.psi"
    psiImplPackage="com.machak.aql.grammar.generated.psi.impl"
    
tokens = [
    // system:
    ASC = "regexp:([Aa])([Aa])([Cc])"
    DESC = "regexp:([Dd])([Es])([Ss])([Cc])"
    FILTER = "regexp:([Ff])([Ii])([Ll])([Tt])([Ee])([Rr])"
    FOR = "regexp:([Ff])([Oo])([Rr])"
    IN = "regexp:([Ii])([Nn])"
    LET = "regexp:([Ll])([Ee])([Tt])"
    LIMIT = "regexp:([Ll])([Ii])([Mm])([Ii])([Tt])"
    RETURN = "regexp:([Rr])([Ee])([Tt])([Uu])([Rr])([Nn])"
    SORT = "regexp:([Ss])([Oo])([Rr])([Tt])"
    // operators
    OP_EQ="="
    OP_IS="::="
    OP_OR="|"
    OP_OPT="?"
    OP_ONEMORE="+"
    OP_ZEROMORE="*"
    OP_AND="&"
    OP_NOT="!"
    SEMICOLON=";"
    LEFT_BRACE="{"
    RIGHT_BRACE="}"
    LEFT_BRACKET="["
    RIGHT_BRACKET="]"
    LEFT_PAREN="("
    RIGHT_PAREN=")"
    SINGLE_QUOTE="'"
    DOUBLE_QUOTE="\""
    NUMBER_INTEGER="regexp:\d+"
    SPACE='regexp:\s+'
    B_COMMENT="regexp:/\*(.|\n)*\*/"
    L_COMMENT='regexp://.*'
    ID='regexp:\p{Alpha}\w*'

]
    
}
aql ::= QueryItem *
LineComment ::= L_COMMENT
BlockComment ::=  B_COMMENT
Comment ::= LineComment | BlockComment
QueryItem ::= !<<eof>> Statement {pin=1 recoverWhile=statement_recover}
private statement_recover::= !(
                        KeywordStatements
                        | ObjectExpression
                        | Sequence
                        | PropertyName
                        | Comment
                    )

KeywordStatements ::=   ASC
                        | DESC
                        | FILTER
                        | FOR
                        | IN
                        | LET
                        | LIMIT
                        | RETURN
                        | SORT

Statement ::= (KeywordStatements) |(PropertyName) | (Sequence) | (ObjectExpression) | (Comment)
ObjectExpression ::= (PropertyLookup)+
PropertyName ::= ID
Sequence ::= NUMBER_INTEGER ".." NUMBER_INTEGER
PropertyLookup ::= "." PropertyKeyName
PropertyKeyName ::= PropertyName


